// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: steammessages_base.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptor_proto "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBanContentCheckResult int32

const (
	EBanContentCheckResult_k_EBanContentCheckResult_NotScanned    EBanContentCheckResult = 0
	EBanContentCheckResult_k_EBanContentCheckResult_Reset         EBanContentCheckResult = 1
	EBanContentCheckResult_k_EBanContentCheckResult_NeedsChecking EBanContentCheckResult = 2
	EBanContentCheckResult_k_EBanContentCheckResult_VeryUnlikely  EBanContentCheckResult = 5
	EBanContentCheckResult_k_EBanContentCheckResult_Unlikely      EBanContentCheckResult = 30
	EBanContentCheckResult_k_EBanContentCheckResult_Possible      EBanContentCheckResult = 50
	EBanContentCheckResult_k_EBanContentCheckResult_Likely        EBanContentCheckResult = 75
	EBanContentCheckResult_k_EBanContentCheckResult_VeryLikely    EBanContentCheckResult = 100
)

// Enum value maps for EBanContentCheckResult.
var (
	EBanContentCheckResult_name = map[int32]string{
		0:   "k_EBanContentCheckResult_NotScanned",
		1:   "k_EBanContentCheckResult_Reset",
		2:   "k_EBanContentCheckResult_NeedsChecking",
		5:   "k_EBanContentCheckResult_VeryUnlikely",
		30:  "k_EBanContentCheckResult_Unlikely",
		50:  "k_EBanContentCheckResult_Possible",
		75:  "k_EBanContentCheckResult_Likely",
		100: "k_EBanContentCheckResult_VeryLikely",
	}
	EBanContentCheckResult_value = map[string]int32{
		"k_EBanContentCheckResult_NotScanned":    0,
		"k_EBanContentCheckResult_Reset":         1,
		"k_EBanContentCheckResult_NeedsChecking": 2,
		"k_EBanContentCheckResult_VeryUnlikely":  5,
		"k_EBanContentCheckResult_Unlikely":      30,
		"k_EBanContentCheckResult_Possible":      50,
		"k_EBanContentCheckResult_Likely":        75,
		"k_EBanContentCheckResult_VeryLikely":    100,
	}
)

func (x EBanContentCheckResult) Enum() *EBanContentCheckResult {
	p := new(EBanContentCheckResult)
	*p = x
	return p
}

func (x EBanContentCheckResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBanContentCheckResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_base_proto_enumTypes[0].Descriptor()
}

func (EBanContentCheckResult) Type() protoreflect.EnumType {
	return &file_steammessages_base_proto_enumTypes[0]
}

func (x EBanContentCheckResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBanContentCheckResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBanContentCheckResult(num)
	return nil
}

// Deprecated: Use EBanContentCheckResult.Descriptor instead.
func (EBanContentCheckResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{0}
}

type EProtoClanEventType int32

const (
	EProtoClanEventType_k_EClanOtherEvent                  EProtoClanEventType = 1
	EProtoClanEventType_k_EClanGameEvent                   EProtoClanEventType = 2
	EProtoClanEventType_k_EClanPartyEvent                  EProtoClanEventType = 3
	EProtoClanEventType_k_EClanMeetingEvent                EProtoClanEventType = 4
	EProtoClanEventType_k_EClanSpecialCauseEvent           EProtoClanEventType = 5
	EProtoClanEventType_k_EClanMusicAndArtsEvent           EProtoClanEventType = 6
	EProtoClanEventType_k_EClanSportsEvent                 EProtoClanEventType = 7
	EProtoClanEventType_k_EClanTripEvent                   EProtoClanEventType = 8
	EProtoClanEventType_k_EClanChatEvent                   EProtoClanEventType = 9
	EProtoClanEventType_k_EClanGameReleaseEvent            EProtoClanEventType = 10
	EProtoClanEventType_k_EClanBroadcastEvent              EProtoClanEventType = 11
	EProtoClanEventType_k_EClanSmallUpdateEvent            EProtoClanEventType = 12
	EProtoClanEventType_k_EClanPreAnnounceMajorUpdateEvent EProtoClanEventType = 13
	EProtoClanEventType_k_EClanMajorUpdateEvent            EProtoClanEventType = 14
	EProtoClanEventType_k_EClanDLCReleaseEvent             EProtoClanEventType = 15
	EProtoClanEventType_k_EClanFutureReleaseEvent          EProtoClanEventType = 16
	EProtoClanEventType_k_EClanESportTournamentStreamEvent EProtoClanEventType = 17
	EProtoClanEventType_k_EClanDevStreamEvent              EProtoClanEventType = 18
	EProtoClanEventType_k_EClanFamousStreamEvent           EProtoClanEventType = 19
	EProtoClanEventType_k_EClanGameSalesEvent              EProtoClanEventType = 20
	EProtoClanEventType_k_EClanGameItemSalesEvent          EProtoClanEventType = 21
	EProtoClanEventType_k_EClanInGameBonusXPEvent          EProtoClanEventType = 22
	EProtoClanEventType_k_EClanInGameLootEvent             EProtoClanEventType = 23
	EProtoClanEventType_k_EClanInGamePerksEvent            EProtoClanEventType = 24
	EProtoClanEventType_k_EClanInGameChallengeEvent        EProtoClanEventType = 25
	EProtoClanEventType_k_EClanInGameContestEvent          EProtoClanEventType = 26
	EProtoClanEventType_k_EClanIRLEvent                    EProtoClanEventType = 27
	EProtoClanEventType_k_EClanNewsEvent                   EProtoClanEventType = 28
	EProtoClanEventType_k_EClanBetaReleaseEvent            EProtoClanEventType = 29
	EProtoClanEventType_k_EClanInGameContentReleaseEvent   EProtoClanEventType = 30
	EProtoClanEventType_k_EClanFreeTrial                   EProtoClanEventType = 31
	EProtoClanEventType_k_EClanSeasonRelease               EProtoClanEventType = 32
	EProtoClanEventType_k_EClanSeasonUpdate                EProtoClanEventType = 33
	EProtoClanEventType_k_EClanCrosspostEvent              EProtoClanEventType = 34
	EProtoClanEventType_k_EClanInGameEventGeneral          EProtoClanEventType = 35
)

// Enum value maps for EProtoClanEventType.
var (
	EProtoClanEventType_name = map[int32]string{
		1:  "k_EClanOtherEvent",
		2:  "k_EClanGameEvent",
		3:  "k_EClanPartyEvent",
		4:  "k_EClanMeetingEvent",
		5:  "k_EClanSpecialCauseEvent",
		6:  "k_EClanMusicAndArtsEvent",
		7:  "k_EClanSportsEvent",
		8:  "k_EClanTripEvent",
		9:  "k_EClanChatEvent",
		10: "k_EClanGameReleaseEvent",
		11: "k_EClanBroadcastEvent",
		12: "k_EClanSmallUpdateEvent",
		13: "k_EClanPreAnnounceMajorUpdateEvent",
		14: "k_EClanMajorUpdateEvent",
		15: "k_EClanDLCReleaseEvent",
		16: "k_EClanFutureReleaseEvent",
		17: "k_EClanESportTournamentStreamEvent",
		18: "k_EClanDevStreamEvent",
		19: "k_EClanFamousStreamEvent",
		20: "k_EClanGameSalesEvent",
		21: "k_EClanGameItemSalesEvent",
		22: "k_EClanInGameBonusXPEvent",
		23: "k_EClanInGameLootEvent",
		24: "k_EClanInGamePerksEvent",
		25: "k_EClanInGameChallengeEvent",
		26: "k_EClanInGameContestEvent",
		27: "k_EClanIRLEvent",
		28: "k_EClanNewsEvent",
		29: "k_EClanBetaReleaseEvent",
		30: "k_EClanInGameContentReleaseEvent",
		31: "k_EClanFreeTrial",
		32: "k_EClanSeasonRelease",
		33: "k_EClanSeasonUpdate",
		34: "k_EClanCrosspostEvent",
		35: "k_EClanInGameEventGeneral",
	}
	EProtoClanEventType_value = map[string]int32{
		"k_EClanOtherEvent":                  1,
		"k_EClanGameEvent":                   2,
		"k_EClanPartyEvent":                  3,
		"k_EClanMeetingEvent":                4,
		"k_EClanSpecialCauseEvent":           5,
		"k_EClanMusicAndArtsEvent":           6,
		"k_EClanSportsEvent":                 7,
		"k_EClanTripEvent":                   8,
		"k_EClanChatEvent":                   9,
		"k_EClanGameReleaseEvent":            10,
		"k_EClanBroadcastEvent":              11,
		"k_EClanSmallUpdateEvent":            12,
		"k_EClanPreAnnounceMajorUpdateEvent": 13,
		"k_EClanMajorUpdateEvent":            14,
		"k_EClanDLCReleaseEvent":             15,
		"k_EClanFutureReleaseEvent":          16,
		"k_EClanESportTournamentStreamEvent": 17,
		"k_EClanDevStreamEvent":              18,
		"k_EClanFamousStreamEvent":           19,
		"k_EClanGameSalesEvent":              20,
		"k_EClanGameItemSalesEvent":          21,
		"k_EClanInGameBonusXPEvent":          22,
		"k_EClanInGameLootEvent":             23,
		"k_EClanInGamePerksEvent":            24,
		"k_EClanInGameChallengeEvent":        25,
		"k_EClanInGameContestEvent":          26,
		"k_EClanIRLEvent":                    27,
		"k_EClanNewsEvent":                   28,
		"k_EClanBetaReleaseEvent":            29,
		"k_EClanInGameContentReleaseEvent":   30,
		"k_EClanFreeTrial":                   31,
		"k_EClanSeasonRelease":               32,
		"k_EClanSeasonUpdate":                33,
		"k_EClanCrosspostEvent":              34,
		"k_EClanInGameEventGeneral":          35,
	}
)

func (x EProtoClanEventType) Enum() *EProtoClanEventType {
	p := new(EProtoClanEventType)
	*p = x
	return p
}

func (x EProtoClanEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProtoClanEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_base_proto_enumTypes[1].Descriptor()
}

func (EProtoClanEventType) Type() protoreflect.EnumType {
	return &file_steammessages_base_proto_enumTypes[1]
}

func (x EProtoClanEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProtoClanEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProtoClanEventType(num)
	return nil
}

// Deprecated: Use EProtoClanEventType.Descriptor instead.
func (EProtoClanEventType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{1}
}

type PartnerEventNotificationType int32

const (
	PartnerEventNotificationType_k_EEventStart          PartnerEventNotificationType = 0
	PartnerEventNotificationType_k_EEventBroadcastStart PartnerEventNotificationType = 1
	PartnerEventNotificationType_k_EEventMatchStart     PartnerEventNotificationType = 2
	PartnerEventNotificationType_k_EEventPartnerMaxType PartnerEventNotificationType = 3
)

// Enum value maps for PartnerEventNotificationType.
var (
	PartnerEventNotificationType_name = map[int32]string{
		0: "k_EEventStart",
		1: "k_EEventBroadcastStart",
		2: "k_EEventMatchStart",
		3: "k_EEventPartnerMaxType",
	}
	PartnerEventNotificationType_value = map[string]int32{
		"k_EEventStart":          0,
		"k_EEventBroadcastStart": 1,
		"k_EEventMatchStart":     2,
		"k_EEventPartnerMaxType": 3,
	}
)

func (x PartnerEventNotificationType) Enum() *PartnerEventNotificationType {
	p := new(PartnerEventNotificationType)
	*p = x
	return p
}

func (x PartnerEventNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartnerEventNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_base_proto_enumTypes[2].Descriptor()
}

func (PartnerEventNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_base_proto_enumTypes[2]
}

func (x PartnerEventNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PartnerEventNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PartnerEventNotificationType(num)
	return nil
}

// Deprecated: Use PartnerEventNotificationType.Descriptor instead.
func (PartnerEventNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{2}
}

type CMsgIPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ip:
	//
	//	*CMsgIPAddress_V4
	//	*CMsgIPAddress_V6
	Ip isCMsgIPAddress_Ip `protobuf_oneof:"ip"`
}

func (x *CMsgIPAddress) Reset() {
	*x = CMsgIPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIPAddress) ProtoMessage() {}

func (x *CMsgIPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIPAddress.ProtoReflect.Descriptor instead.
func (*CMsgIPAddress) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{0}
}

func (m *CMsgIPAddress) GetIp() isCMsgIPAddress_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (x *CMsgIPAddress) GetV4() uint32 {
	if x, ok := x.GetIp().(*CMsgIPAddress_V4); ok {
		return x.V4
	}
	return 0
}

func (x *CMsgIPAddress) GetV6() []byte {
	if x, ok := x.GetIp().(*CMsgIPAddress_V6); ok {
		return x.V6
	}
	return nil
}

type isCMsgIPAddress_Ip interface {
	isCMsgIPAddress_Ip()
}

type CMsgIPAddress_V4 struct {
	V4 uint32 `protobuf:"fixed32,1,opt,name=v4,oneof"`
}

type CMsgIPAddress_V6 struct {
	V6 []byte `protobuf:"bytes,2,opt,name=v6,oneof"`
}

func (*CMsgIPAddress_V4) isCMsgIPAddress_Ip() {}

func (*CMsgIPAddress_V6) isCMsgIPAddress_Ip() {}

type CMsgIPAddressBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalIpAddress *CMsgIPAddress `protobuf:"bytes,1,opt,name=original_ip_address,json=originalIpAddress" json:"original_ip_address,omitempty"`
	Bucket            *uint64        `protobuf:"fixed64,2,opt,name=bucket" json:"bucket,omitempty"`
}

func (x *CMsgIPAddressBucket) Reset() {
	*x = CMsgIPAddressBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIPAddressBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIPAddressBucket) ProtoMessage() {}

func (x *CMsgIPAddressBucket) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIPAddressBucket.ProtoReflect.Descriptor instead.
func (*CMsgIPAddressBucket) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgIPAddressBucket) GetOriginalIpAddress() *CMsgIPAddress {
	if x != nil {
		return x.OriginalIpAddress
	}
	return nil
}

func (x *CMsgIPAddressBucket) GetBucket() uint64 {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return 0
}

type CMsgGCRoutingProtoBufHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstGcidQueue  *uint64 `protobuf:"varint,1,opt,name=dst_gcid_queue,json=dstGcidQueue" json:"dst_gcid_queue,omitempty"`
	DstGcDirIndex *uint32 `protobuf:"varint,2,opt,name=dst_gc_dir_index,json=dstGcDirIndex" json:"dst_gc_dir_index,omitempty"`
}

func (x *CMsgGCRoutingProtoBufHeader) Reset() {
	*x = CMsgGCRoutingProtoBufHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRoutingProtoBufHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRoutingProtoBufHeader) ProtoMessage() {}

func (x *CMsgGCRoutingProtoBufHeader) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRoutingProtoBufHeader.ProtoReflect.Descriptor instead.
func (*CMsgGCRoutingProtoBufHeader) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGCRoutingProtoBufHeader) GetDstGcidQueue() uint64 {
	if x != nil && x.DstGcidQueue != nil {
		return *x.DstGcidQueue
	}
	return 0
}

func (x *CMsgGCRoutingProtoBufHeader) GetDstGcDirIndex() uint32 {
	if x != nil && x.DstGcDirIndex != nil {
		return *x.DstGcDirIndex
	}
	return 0
}

type CMsgProtoBufHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64                      `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ClientSessionid        *int32                       `protobuf:"varint,2,opt,name=client_sessionid,json=clientSessionid" json:"client_sessionid,omitempty"`
	RoutingAppid           *uint32                      `protobuf:"varint,3,opt,name=routing_appid,json=routingAppid" json:"routing_appid,omitempty"`
	JobidSource            *uint64                      `protobuf:"fixed64,10,opt,name=jobid_source,json=jobidSource,def=18446744073709551615" json:"jobid_source,omitempty"`
	JobidTarget            *uint64                      `protobuf:"fixed64,11,opt,name=jobid_target,json=jobidTarget,def=18446744073709551615" json:"jobid_target,omitempty"`
	TargetJobName          *string                      `protobuf:"bytes,12,opt,name=target_job_name,json=targetJobName" json:"target_job_name,omitempty"`
	SeqNum                 *int32                       `protobuf:"varint,24,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	Eresult                *int32                       `protobuf:"varint,13,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ErrorMessage           *string                      `protobuf:"bytes,14,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	AuthAccountFlags       *uint32                      `protobuf:"varint,16,opt,name=auth_account_flags,json=authAccountFlags" json:"auth_account_flags,omitempty"`
	TokenSource            *uint32                      `protobuf:"varint,22,opt,name=token_source,json=tokenSource" json:"token_source,omitempty"`
	AdminSpoofingUser      *bool                        `protobuf:"varint,23,opt,name=admin_spoofing_user,json=adminSpoofingUser" json:"admin_spoofing_user,omitempty"`
	TransportError         *int32                       `protobuf:"varint,17,opt,name=transport_error,json=transportError,def=1" json:"transport_error,omitempty"`
	Messageid              *uint64                      `protobuf:"varint,18,opt,name=messageid,def=18446744073709551615" json:"messageid,omitempty"`
	PublisherGroupId       *uint32                      `protobuf:"varint,19,opt,name=publisher_group_id,json=publisherGroupId" json:"publisher_group_id,omitempty"`
	Sysid                  *uint32                      `protobuf:"varint,20,opt,name=sysid" json:"sysid,omitempty"`
	TraceTag               *uint64                      `protobuf:"varint,21,opt,name=trace_tag,json=traceTag" json:"trace_tag,omitempty"`
	WebapiKeyId            *uint32                      `protobuf:"varint,25,opt,name=webapi_key_id,json=webapiKeyId" json:"webapi_key_id,omitempty"`
	IsFromExternalSource   *bool                        `protobuf:"varint,26,opt,name=is_from_external_source,json=isFromExternalSource" json:"is_from_external_source,omitempty"`
	ForwardToSysid         []uint32                     `protobuf:"varint,27,rep,name=forward_to_sysid,json=forwardToSysid" json:"forward_to_sysid,omitempty"`
	CmSysid                *uint32                      `protobuf:"varint,28,opt,name=cm_sysid,json=cmSysid" json:"cm_sysid,omitempty"`
	LauncherType           *uint32                      `protobuf:"varint,31,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	Realm                  *uint32                      `protobuf:"varint,32,opt,name=realm,def=0" json:"realm,omitempty"`
	TimeoutMs              *int32                       `protobuf:"varint,33,opt,name=timeout_ms,json=timeoutMs,def=-1" json:"timeout_ms,omitempty"`
	DebugSource            *string                      `protobuf:"bytes,34,opt,name=debug_source,json=debugSource" json:"debug_source,omitempty"`
	DebugSourceStringIndex *uint32                      `protobuf:"varint,35,opt,name=debug_source_string_index,json=debugSourceStringIndex" json:"debug_source_string_index,omitempty"`
	TokenId                *uint64                      `protobuf:"varint,36,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	RoutingGc              *CMsgGCRoutingProtoBufHeader `protobuf:"bytes,37,opt,name=routing_gc,json=routingGc" json:"routing_gc,omitempty"`
	// Types that are assignable to IpAddr:
	//
	//	*CMsgProtoBufHeader_Ip
	//	*CMsgProtoBufHeader_IpV6
	IpAddr isCMsgProtoBufHeader_IpAddr `protobuf_oneof:"ip_addr"`
}

// Default values for CMsgProtoBufHeader fields.
const (
	Default_CMsgProtoBufHeader_JobidSource    = uint64(18446744073709551615)
	Default_CMsgProtoBufHeader_JobidTarget    = uint64(18446744073709551615)
	Default_CMsgProtoBufHeader_Eresult        = int32(2)
	Default_CMsgProtoBufHeader_TransportError = int32(1)
	Default_CMsgProtoBufHeader_Messageid      = uint64(18446744073709551615)
	Default_CMsgProtoBufHeader_LauncherType   = uint32(0)
	Default_CMsgProtoBufHeader_Realm          = uint32(0)
	Default_CMsgProtoBufHeader_TimeoutMs      = int32(-1)
)

func (x *CMsgProtoBufHeader) Reset() {
	*x = CMsgProtoBufHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtoBufHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtoBufHeader) ProtoMessage() {}

func (x *CMsgProtoBufHeader) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtoBufHeader.ProtoReflect.Descriptor instead.
func (*CMsgProtoBufHeader) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgProtoBufHeader) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetClientSessionid() int32 {
	if x != nil && x.ClientSessionid != nil {
		return *x.ClientSessionid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetRoutingAppid() uint32 {
	if x != nil && x.RoutingAppid != nil {
		return *x.RoutingAppid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetJobidSource() uint64 {
	if x != nil && x.JobidSource != nil {
		return *x.JobidSource
	}
	return Default_CMsgProtoBufHeader_JobidSource
}

func (x *CMsgProtoBufHeader) GetJobidTarget() uint64 {
	if x != nil && x.JobidTarget != nil {
		return *x.JobidTarget
	}
	return Default_CMsgProtoBufHeader_JobidTarget
}

func (x *CMsgProtoBufHeader) GetTargetJobName() string {
	if x != nil && x.TargetJobName != nil {
		return *x.TargetJobName
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetSeqNum() int32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgProtoBufHeader_Eresult
}

func (x *CMsgProtoBufHeader) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetAuthAccountFlags() uint32 {
	if x != nil && x.AuthAccountFlags != nil {
		return *x.AuthAccountFlags
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTokenSource() uint32 {
	if x != nil && x.TokenSource != nil {
		return *x.TokenSource
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetAdminSpoofingUser() bool {
	if x != nil && x.AdminSpoofingUser != nil {
		return *x.AdminSpoofingUser
	}
	return false
}

func (x *CMsgProtoBufHeader) GetTransportError() int32 {
	if x != nil && x.TransportError != nil {
		return *x.TransportError
	}
	return Default_CMsgProtoBufHeader_TransportError
}

func (x *CMsgProtoBufHeader) GetMessageid() uint64 {
	if x != nil && x.Messageid != nil {
		return *x.Messageid
	}
	return Default_CMsgProtoBufHeader_Messageid
}

func (x *CMsgProtoBufHeader) GetPublisherGroupId() uint32 {
	if x != nil && x.PublisherGroupId != nil {
		return *x.PublisherGroupId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetSysid() uint32 {
	if x != nil && x.Sysid != nil {
		return *x.Sysid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTraceTag() uint64 {
	if x != nil && x.TraceTag != nil {
		return *x.TraceTag
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetWebapiKeyId() uint32 {
	if x != nil && x.WebapiKeyId != nil {
		return *x.WebapiKeyId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetIsFromExternalSource() bool {
	if x != nil && x.IsFromExternalSource != nil {
		return *x.IsFromExternalSource
	}
	return false
}

func (x *CMsgProtoBufHeader) GetForwardToSysid() []uint32 {
	if x != nil {
		return x.ForwardToSysid
	}
	return nil
}

func (x *CMsgProtoBufHeader) GetCmSysid() uint32 {
	if x != nil && x.CmSysid != nil {
		return *x.CmSysid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetLauncherType() uint32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return Default_CMsgProtoBufHeader_LauncherType
}

func (x *CMsgProtoBufHeader) GetRealm() uint32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return Default_CMsgProtoBufHeader_Realm
}

func (x *CMsgProtoBufHeader) GetTimeoutMs() int32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return Default_CMsgProtoBufHeader_TimeoutMs
}

func (x *CMsgProtoBufHeader) GetDebugSource() string {
	if x != nil && x.DebugSource != nil {
		return *x.DebugSource
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetDebugSourceStringIndex() uint32 {
	if x != nil && x.DebugSourceStringIndex != nil {
		return *x.DebugSourceStringIndex
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetRoutingGc() *CMsgGCRoutingProtoBufHeader {
	if x != nil {
		return x.RoutingGc
	}
	return nil
}

func (m *CMsgProtoBufHeader) GetIpAddr() isCMsgProtoBufHeader_IpAddr {
	if m != nil {
		return m.IpAddr
	}
	return nil
}

func (x *CMsgProtoBufHeader) GetIp() uint32 {
	if x, ok := x.GetIpAddr().(*CMsgProtoBufHeader_Ip); ok {
		return x.Ip
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetIpV6() []byte {
	if x, ok := x.GetIpAddr().(*CMsgProtoBufHeader_IpV6); ok {
		return x.IpV6
	}
	return nil
}

type isCMsgProtoBufHeader_IpAddr interface {
	isCMsgProtoBufHeader_IpAddr()
}

type CMsgProtoBufHeader_Ip struct {
	Ip uint32 `protobuf:"varint,15,opt,name=ip,oneof"`
}

type CMsgProtoBufHeader_IpV6 struct {
	IpV6 []byte `protobuf:"bytes,29,opt,name=ip_v6,json=ipV6,oneof"`
}

func (*CMsgProtoBufHeader_Ip) isCMsgProtoBufHeader_IpAddr() {}

func (*CMsgProtoBufHeader_IpV6) isCMsgProtoBufHeader_IpAddr() {}

type CMsgMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeUnzipped *uint32 `protobuf:"varint,1,opt,name=size_unzipped,json=sizeUnzipped" json:"size_unzipped,omitempty"`
	MessageBody  []byte  `protobuf:"bytes,2,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (x *CMsgMulti) Reset() {
	*x = CMsgMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMulti) ProtoMessage() {}

func (x *CMsgMulti) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMulti.ProtoReflect.Descriptor instead.
func (*CMsgMulti) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgMulti) GetSizeUnzipped() uint32 {
	if x != nil && x.SizeUnzipped != nil {
		return *x.SizeUnzipped
	}
	return 0
}

func (x *CMsgMulti) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

type CMsgProtobufWrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBody []byte `protobuf:"bytes,1,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (x *CMsgProtobufWrapped) Reset() {
	*x = CMsgProtobufWrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtobufWrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtobufWrapped) ProtoMessage() {}

func (x *CMsgProtobufWrapped) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtobufWrapped.ProtoReflect.Descriptor instead.
func (*CMsgProtobufWrapped) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgProtobufWrapped) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

type CMsgAuthTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estate       *uint32 `protobuf:"varint,1,opt,name=estate" json:"estate,omitempty"`
	Eresult      *uint32 `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Steamid      *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Gameid       *uint64 `protobuf:"fixed64,4,opt,name=gameid" json:"gameid,omitempty"`
	HSteamPipe   *uint32 `protobuf:"varint,5,opt,name=h_steam_pipe,json=hSteamPipe" json:"h_steam_pipe,omitempty"`
	TicketCrc    *uint32 `protobuf:"varint,6,opt,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	Ticket       []byte  `protobuf:"bytes,7,opt,name=ticket" json:"ticket,omitempty"`
	ServerSecret []byte  `protobuf:"bytes,8,opt,name=server_secret,json=serverSecret" json:"server_secret,omitempty"`
}

// Default values for CMsgAuthTicket fields.
const (
	Default_CMsgAuthTicket_Eresult = uint32(2)
)

func (x *CMsgAuthTicket) Reset() {
	*x = CMsgAuthTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAuthTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAuthTicket) ProtoMessage() {}

func (x *CMsgAuthTicket) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAuthTicket.ProtoReflect.Descriptor instead.
func (*CMsgAuthTicket) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgAuthTicket) GetEstate() uint32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgAuthTicket) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgAuthTicket_Eresult
}

func (x *CMsgAuthTicket) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgAuthTicket) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgAuthTicket) GetHSteamPipe() uint32 {
	if x != nil && x.HSteamPipe != nil {
		return *x.HSteamPipe
	}
	return 0
}

func (x *CMsgAuthTicket) GetTicketCrc() uint32 {
	if x != nil && x.TicketCrc != nil {
		return *x.TicketCrc
	}
	return 0
}

func (x *CMsgAuthTicket) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgAuthTicket) GetServerSecret() []byte {
	if x != nil {
		return x.ServerSecret
	}
	return nil
}

type CCDDBAppDetailCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                   *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name                    *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon                    *string  `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Tool                    *bool    `protobuf:"varint,6,opt,name=tool" json:"tool,omitempty"`
	Demo                    *bool    `protobuf:"varint,7,opt,name=demo" json:"demo,omitempty"`
	Media                   *bool    `protobuf:"varint,8,opt,name=media" json:"media,omitempty"`
	CommunityVisibleStats   *bool    `protobuf:"varint,9,opt,name=community_visible_stats,json=communityVisibleStats" json:"community_visible_stats,omitempty"`
	FriendlyName            *string  `protobuf:"bytes,10,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Propagation             *string  `protobuf:"bytes,11,opt,name=propagation" json:"propagation,omitempty"`
	HasAdultContent         *bool    `protobuf:"varint,12,opt,name=has_adult_content,json=hasAdultContent" json:"has_adult_content,omitempty"`
	IsVisibleInSteamChina   *bool    `protobuf:"varint,13,opt,name=is_visible_in_steam_china,json=isVisibleInSteamChina" json:"is_visible_in_steam_china,omitempty"`
	AppType                 *uint32  `protobuf:"varint,14,opt,name=app_type,json=appType" json:"app_type,omitempty"`
	HasAdultContentSex      *bool    `protobuf:"varint,15,opt,name=has_adult_content_sex,json=hasAdultContentSex" json:"has_adult_content_sex,omitempty"`
	HasAdultContentViolence *bool    `protobuf:"varint,16,opt,name=has_adult_content_violence,json=hasAdultContentViolence" json:"has_adult_content_violence,omitempty"`
	ContentDescriptorids    []uint32 `protobuf:"varint,17,rep,name=content_descriptorids,json=contentDescriptorids" json:"content_descriptorids,omitempty"`
}

func (x *CCDDBAppDetailCommon) Reset() {
	*x = CCDDBAppDetailCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCDDBAppDetailCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCDDBAppDetailCommon) ProtoMessage() {}

func (x *CCDDBAppDetailCommon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCDDBAppDetailCommon.ProtoReflect.Descriptor instead.
func (*CCDDBAppDetailCommon) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{7}
}

func (x *CCDDBAppDetailCommon) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCDDBAppDetailCommon) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetTool() bool {
	if x != nil && x.Tool != nil {
		return *x.Tool
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetDemo() bool {
	if x != nil && x.Demo != nil {
		return *x.Demo
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetMedia() bool {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetCommunityVisibleStats() bool {
	if x != nil && x.CommunityVisibleStats != nil {
		return *x.CommunityVisibleStats
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetPropagation() string {
	if x != nil && x.Propagation != nil {
		return *x.Propagation
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetHasAdultContent() bool {
	if x != nil && x.HasAdultContent != nil {
		return *x.HasAdultContent
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetIsVisibleInSteamChina() bool {
	if x != nil && x.IsVisibleInSteamChina != nil {
		return *x.IsVisibleInSteamChina
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetAppType() uint32 {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return 0
}

func (x *CCDDBAppDetailCommon) GetHasAdultContentSex() bool {
	if x != nil && x.HasAdultContentSex != nil {
		return *x.HasAdultContentSex
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetHasAdultContentViolence() bool {
	if x != nil && x.HasAdultContentViolence != nil {
		return *x.HasAdultContentViolence
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetContentDescriptorids() []uint32 {
	if x != nil {
		return x.ContentDescriptorids
	}
	return nil
}

type CMsgAppRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditInfo                 *bool `protobuf:"varint,1,opt,name=edit_info,json=editInfo" json:"edit_info,omitempty"`
	Publish                  *bool `protobuf:"varint,2,opt,name=publish" json:"publish,omitempty"`
	ViewErrorData            *bool `protobuf:"varint,3,opt,name=view_error_data,json=viewErrorData" json:"view_error_data,omitempty"`
	Download                 *bool `protobuf:"varint,4,opt,name=download" json:"download,omitempty"`
	UploadCdkeys             *bool `protobuf:"varint,5,opt,name=upload_cdkeys,json=uploadCdkeys" json:"upload_cdkeys,omitempty"`
	GenerateCdkeys           *bool `protobuf:"varint,6,opt,name=generate_cdkeys,json=generateCdkeys" json:"generate_cdkeys,omitempty"`
	ViewFinancials           *bool `protobuf:"varint,7,opt,name=view_financials,json=viewFinancials" json:"view_financials,omitempty"`
	ManageCeg                *bool `protobuf:"varint,8,opt,name=manage_ceg,json=manageCeg" json:"manage_ceg,omitempty"`
	ManageSigning            *bool `protobuf:"varint,9,opt,name=manage_signing,json=manageSigning" json:"manage_signing,omitempty"`
	ManageCdkeys             *bool `protobuf:"varint,10,opt,name=manage_cdkeys,json=manageCdkeys" json:"manage_cdkeys,omitempty"`
	EditMarketing            *bool `protobuf:"varint,11,opt,name=edit_marketing,json=editMarketing" json:"edit_marketing,omitempty"`
	EconomySupport           *bool `protobuf:"varint,12,opt,name=economy_support,json=economySupport" json:"economy_support,omitempty"`
	EconomySupportSupervisor *bool `protobuf:"varint,13,opt,name=economy_support_supervisor,json=economySupportSupervisor" json:"economy_support_supervisor,omitempty"`
	ManagePricing            *bool `protobuf:"varint,14,opt,name=manage_pricing,json=managePricing" json:"manage_pricing,omitempty"`
	BroadcastLive            *bool `protobuf:"varint,15,opt,name=broadcast_live,json=broadcastLive" json:"broadcast_live,omitempty"`
	ViewMarketingTraffic     *bool `protobuf:"varint,16,opt,name=view_marketing_traffic,json=viewMarketingTraffic" json:"view_marketing_traffic,omitempty"`
	EditStoreDisplayContent  *bool `protobuf:"varint,17,opt,name=edit_store_display_content,json=editStoreDisplayContent" json:"edit_store_display_content,omitempty"`
}

func (x *CMsgAppRights) Reset() {
	*x = CMsgAppRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAppRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAppRights) ProtoMessage() {}

func (x *CMsgAppRights) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAppRights.ProtoReflect.Descriptor instead.
func (*CMsgAppRights) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgAppRights) GetEditInfo() bool {
	if x != nil && x.EditInfo != nil {
		return *x.EditInfo
	}
	return false
}

func (x *CMsgAppRights) GetPublish() bool {
	if x != nil && x.Publish != nil {
		return *x.Publish
	}
	return false
}

func (x *CMsgAppRights) GetViewErrorData() bool {
	if x != nil && x.ViewErrorData != nil {
		return *x.ViewErrorData
	}
	return false
}

func (x *CMsgAppRights) GetDownload() bool {
	if x != nil && x.Download != nil {
		return *x.Download
	}
	return false
}

func (x *CMsgAppRights) GetUploadCdkeys() bool {
	if x != nil && x.UploadCdkeys != nil {
		return *x.UploadCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetGenerateCdkeys() bool {
	if x != nil && x.GenerateCdkeys != nil {
		return *x.GenerateCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetViewFinancials() bool {
	if x != nil && x.ViewFinancials != nil {
		return *x.ViewFinancials
	}
	return false
}

func (x *CMsgAppRights) GetManageCeg() bool {
	if x != nil && x.ManageCeg != nil {
		return *x.ManageCeg
	}
	return false
}

func (x *CMsgAppRights) GetManageSigning() bool {
	if x != nil && x.ManageSigning != nil {
		return *x.ManageSigning
	}
	return false
}

func (x *CMsgAppRights) GetManageCdkeys() bool {
	if x != nil && x.ManageCdkeys != nil {
		return *x.ManageCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetEditMarketing() bool {
	if x != nil && x.EditMarketing != nil {
		return *x.EditMarketing
	}
	return false
}

func (x *CMsgAppRights) GetEconomySupport() bool {
	if x != nil && x.EconomySupport != nil {
		return *x.EconomySupport
	}
	return false
}

func (x *CMsgAppRights) GetEconomySupportSupervisor() bool {
	if x != nil && x.EconomySupportSupervisor != nil {
		return *x.EconomySupportSupervisor
	}
	return false
}

func (x *CMsgAppRights) GetManagePricing() bool {
	if x != nil && x.ManagePricing != nil {
		return *x.ManagePricing
	}
	return false
}

func (x *CMsgAppRights) GetBroadcastLive() bool {
	if x != nil && x.BroadcastLive != nil {
		return *x.BroadcastLive
	}
	return false
}

func (x *CMsgAppRights) GetViewMarketingTraffic() bool {
	if x != nil && x.ViewMarketingTraffic != nil {
		return *x.ViewMarketingTraffic
	}
	return false
}

func (x *CMsgAppRights) GetEditStoreDisplayContent() bool {
	if x != nil && x.EditStoreDisplayContent != nil {
		return *x.EditStoreDisplayContent
	}
	return false
}

type CCuratorPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedLanguages   *uint32  `protobuf:"varint,1,opt,name=supported_languages,json=supportedLanguages" json:"supported_languages,omitempty"`
	PlatformWindows      *bool    `protobuf:"varint,2,opt,name=platform_windows,json=platformWindows" json:"platform_windows,omitempty"`
	PlatformMac          *bool    `protobuf:"varint,3,opt,name=platform_mac,json=platformMac" json:"platform_mac,omitempty"`
	PlatformLinux        *bool    `protobuf:"varint,4,opt,name=platform_linux,json=platformLinux" json:"platform_linux,omitempty"`
	VrContent            *bool    `protobuf:"varint,5,opt,name=vr_content,json=vrContent" json:"vr_content,omitempty"`
	AdultContentViolence *bool    `protobuf:"varint,6,opt,name=adult_content_violence,json=adultContentViolence" json:"adult_content_violence,omitempty"`
	AdultContentSex      *bool    `protobuf:"varint,7,opt,name=adult_content_sex,json=adultContentSex" json:"adult_content_sex,omitempty"`
	TimestampUpdated     *uint32  `protobuf:"varint,8,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	TagidsCurated        []uint32 `protobuf:"varint,9,rep,name=tagids_curated,json=tagidsCurated" json:"tagids_curated,omitempty"`
	TagidsFiltered       []uint32 `protobuf:"varint,10,rep,name=tagids_filtered,json=tagidsFiltered" json:"tagids_filtered,omitempty"`
	WebsiteTitle         *string  `protobuf:"bytes,11,opt,name=website_title,json=websiteTitle" json:"website_title,omitempty"`
	WebsiteUrl           *string  `protobuf:"bytes,12,opt,name=website_url,json=websiteUrl" json:"website_url,omitempty"`
	DiscussionUrl        *string  `protobuf:"bytes,13,opt,name=discussion_url,json=discussionUrl" json:"discussion_url,omitempty"`
	ShowBroadcast        *bool    `protobuf:"varint,14,opt,name=show_broadcast,json=showBroadcast" json:"show_broadcast,omitempty"`
}

func (x *CCuratorPreferences) Reset() {
	*x = CCuratorPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCuratorPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCuratorPreferences) ProtoMessage() {}

func (x *CCuratorPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCuratorPreferences.ProtoReflect.Descriptor instead.
func (*CCuratorPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{9}
}

func (x *CCuratorPreferences) GetSupportedLanguages() uint32 {
	if x != nil && x.SupportedLanguages != nil {
		return *x.SupportedLanguages
	}
	return 0
}

func (x *CCuratorPreferences) GetPlatformWindows() bool {
	if x != nil && x.PlatformWindows != nil {
		return *x.PlatformWindows
	}
	return false
}

func (x *CCuratorPreferences) GetPlatformMac() bool {
	if x != nil && x.PlatformMac != nil {
		return *x.PlatformMac
	}
	return false
}

func (x *CCuratorPreferences) GetPlatformLinux() bool {
	if x != nil && x.PlatformLinux != nil {
		return *x.PlatformLinux
	}
	return false
}

func (x *CCuratorPreferences) GetVrContent() bool {
	if x != nil && x.VrContent != nil {
		return *x.VrContent
	}
	return false
}

func (x *CCuratorPreferences) GetAdultContentViolence() bool {
	if x != nil && x.AdultContentViolence != nil {
		return *x.AdultContentViolence
	}
	return false
}

func (x *CCuratorPreferences) GetAdultContentSex() bool {
	if x != nil && x.AdultContentSex != nil {
		return *x.AdultContentSex
	}
	return false
}

func (x *CCuratorPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

func (x *CCuratorPreferences) GetTagidsCurated() []uint32 {
	if x != nil {
		return x.TagidsCurated
	}
	return nil
}

func (x *CCuratorPreferences) GetTagidsFiltered() []uint32 {
	if x != nil {
		return x.TagidsFiltered
	}
	return nil
}

func (x *CCuratorPreferences) GetWebsiteTitle() string {
	if x != nil && x.WebsiteTitle != nil {
		return *x.WebsiteTitle
	}
	return ""
}

func (x *CCuratorPreferences) GetWebsiteUrl() string {
	if x != nil && x.WebsiteUrl != nil {
		return *x.WebsiteUrl
	}
	return ""
}

func (x *CCuratorPreferences) GetDiscussionUrl() string {
	if x != nil && x.DiscussionUrl != nil {
		return *x.DiscussionUrl
	}
	return ""
}

func (x *CCuratorPreferences) GetShowBroadcast() bool {
	if x != nil && x.ShowBroadcast != nil {
		return *x.ShowBroadcast
	}
	return false
}

type CLocalizationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language        *uint32 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	LocalizedString *string `protobuf:"bytes,2,opt,name=localized_string,json=localizedString" json:"localized_string,omitempty"`
}

func (x *CLocalizationToken) Reset() {
	*x = CLocalizationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLocalizationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLocalizationToken) ProtoMessage() {}

func (x *CLocalizationToken) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLocalizationToken.ProtoReflect.Descriptor instead.
func (*CLocalizationToken) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{10}
}

func (x *CLocalizationToken) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CLocalizationToken) GetLocalizedString() string {
	if x != nil && x.LocalizedString != nil {
		return *x.LocalizedString
	}
	return ""
}

type CClanEventUserNewsTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid              *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid            *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid     *uint64 `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	RtimeStart          *uint32 `protobuf:"varint,4,opt,name=rtime_start,json=rtimeStart" json:"rtime_start,omitempty"`
	RtimeEnd            *uint32 `protobuf:"varint,5,opt,name=rtime_end,json=rtimeEnd" json:"rtime_end,omitempty"`
	PriorityScore       *uint32 `protobuf:"varint,6,opt,name=priority_score,json=priorityScore" json:"priority_score,omitempty"`
	Type                *uint32 `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
	ClampRangeSlot      *uint32 `protobuf:"varint,8,opt,name=clamp_range_slot,json=clampRangeSlot" json:"clamp_range_slot,omitempty"`
	Appid               *uint32 `protobuf:"varint,9,opt,name=appid" json:"appid,omitempty"`
	Rtime32LastModified *uint32 `protobuf:"varint,10,opt,name=rtime32_last_modified,json=rtime32LastModified" json:"rtime32_last_modified,omitempty"`
}

func (x *CClanEventUserNewsTuple) Reset() {
	*x = CClanEventUserNewsTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanEventUserNewsTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanEventUserNewsTuple) ProtoMessage() {}

func (x *CClanEventUserNewsTuple) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanEventUserNewsTuple.ProtoReflect.Descriptor instead.
func (*CClanEventUserNewsTuple) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{11}
}

func (x *CClanEventUserNewsTuple) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetRtimeStart() uint32 {
	if x != nil && x.RtimeStart != nil {
		return *x.RtimeStart
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetRtimeEnd() uint32 {
	if x != nil && x.RtimeEnd != nil {
		return *x.RtimeEnd
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetPriorityScore() uint32 {
	if x != nil && x.PriorityScore != nil {
		return *x.PriorityScore
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetClampRangeSlot() uint32 {
	if x != nil && x.ClampRangeSlot != nil {
		return *x.ClampRangeSlot
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClanEventUserNewsTuple) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return 0
}

type CClanMatchEventByRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtimeBefore *uint32                    `protobuf:"varint,1,opt,name=rtime_before,json=rtimeBefore" json:"rtime_before,omitempty"`
	RtimeAfter  *uint32                    `protobuf:"varint,2,opt,name=rtime_after,json=rtimeAfter" json:"rtime_after,omitempty"`
	Qualified   *uint32                    `protobuf:"varint,3,opt,name=qualified" json:"qualified,omitempty"`
	Events      []*CClanEventUserNewsTuple `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
}

func (x *CClanMatchEventByRange) Reset() {
	*x = CClanMatchEventByRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanMatchEventByRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanMatchEventByRange) ProtoMessage() {}

func (x *CClanMatchEventByRange) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanMatchEventByRange.ProtoReflect.Descriptor instead.
func (*CClanMatchEventByRange) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{12}
}

func (x *CClanMatchEventByRange) GetRtimeBefore() uint32 {
	if x != nil && x.RtimeBefore != nil {
		return *x.RtimeBefore
	}
	return 0
}

func (x *CClanMatchEventByRange) GetRtimeAfter() uint32 {
	if x != nil && x.RtimeAfter != nil {
		return *x.RtimeAfter
	}
	return 0
}

func (x *CClanMatchEventByRange) GetQualified() uint32 {
	if x != nil && x.Qualified != nil {
		return *x.Qualified
	}
	return 0
}

func (x *CClanMatchEventByRange) GetEvents() []*CClanEventUserNewsTuple {
	if x != nil {
		return x.Events
	}
	return nil
}

type CCommunity_ClanAnnouncementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid            *uint64                 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Clanid         *uint64                 `protobuf:"varint,2,opt,name=clanid" json:"clanid,omitempty"`
	Posterid       *uint64                 `protobuf:"varint,3,opt,name=posterid" json:"posterid,omitempty"`
	Headline       *string                 `protobuf:"bytes,4,opt,name=headline" json:"headline,omitempty"`
	Posttime       *uint32                 `protobuf:"varint,5,opt,name=posttime" json:"posttime,omitempty"`
	Updatetime     *uint32                 `protobuf:"varint,6,opt,name=updatetime" json:"updatetime,omitempty"`
	Body           *string                 `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Commentcount   *int32                  `protobuf:"varint,8,opt,name=commentcount" json:"commentcount,omitempty"`
	Tags           []string                `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
	Language       *int32                  `protobuf:"varint,10,opt,name=language" json:"language,omitempty"`
	Hidden         *bool                   `protobuf:"varint,11,opt,name=hidden" json:"hidden,omitempty"`
	ForumTopicId   *uint64                 `protobuf:"fixed64,12,opt,name=forum_topic_id,json=forumTopicId" json:"forum_topic_id,omitempty"`
	EventGid       *uint64                 `protobuf:"fixed64,13,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	Voteupcount    *int32                  `protobuf:"varint,14,opt,name=voteupcount" json:"voteupcount,omitempty"`
	Votedowncount  *int32                  `protobuf:"varint,15,opt,name=votedowncount" json:"votedowncount,omitempty"`
	BanCheckResult *EBanContentCheckResult `protobuf:"varint,16,opt,name=ban_check_result,json=banCheckResult,enum=EBanContentCheckResult,def=0" json:"ban_check_result,omitempty"`
	Banned         *bool                   `protobuf:"varint,17,opt,name=banned" json:"banned,omitempty"`
}

// Default values for CCommunity_ClanAnnouncementInfo fields.
const (
	Default_CCommunity_ClanAnnouncementInfo_BanCheckResult = EBanContentCheckResult_k_EBanContentCheckResult_NotScanned
)

func (x *CCommunity_ClanAnnouncementInfo) Reset() {
	*x = CCommunity_ClanAnnouncementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClanAnnouncementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClanAnnouncementInfo) ProtoMessage() {}

func (x *CCommunity_ClanAnnouncementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClanAnnouncementInfo.ProtoReflect.Descriptor instead.
func (*CCommunity_ClanAnnouncementInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{13}
}

func (x *CCommunity_ClanAnnouncementInfo) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetClanid() uint64 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetPosterid() uint64 {
	if x != nil && x.Posterid != nil {
		return *x.Posterid
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CCommunity_ClanAnnouncementInfo) GetPosttime() uint32 {
	if x != nil && x.Posttime != nil {
		return *x.Posttime
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetUpdatetime() uint32 {
	if x != nil && x.Updatetime != nil {
		return *x.Updatetime
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CCommunity_ClanAnnouncementInfo) GetCommentcount() int32 {
	if x != nil && x.Commentcount != nil {
		return *x.Commentcount
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CCommunity_ClanAnnouncementInfo) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CCommunity_ClanAnnouncementInfo) GetForumTopicId() uint64 {
	if x != nil && x.ForumTopicId != nil {
		return *x.ForumTopicId
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetVoteupcount() int32 {
	if x != nil && x.Voteupcount != nil {
		return *x.Voteupcount
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetVotedowncount() int32 {
	if x != nil && x.Votedowncount != nil {
		return *x.Votedowncount
	}
	return 0
}

func (x *CCommunity_ClanAnnouncementInfo) GetBanCheckResult() EBanContentCheckResult {
	if x != nil && x.BanCheckResult != nil {
		return *x.BanCheckResult
	}
	return Default_CCommunity_ClanAnnouncementInfo_BanCheckResult
}

func (x *CCommunity_ClanAnnouncementInfo) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

type CClanEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid                    *uint64                          `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	ClanSteamid            *uint64                          `protobuf:"fixed64,2,opt,name=clan_steamid,json=clanSteamid" json:"clan_steamid,omitempty"`
	EventName              *string                          `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	EventType              *EProtoClanEventType             `protobuf:"varint,4,opt,name=event_type,json=eventType,enum=EProtoClanEventType,def=1" json:"event_type,omitempty"`
	Appid                  *uint32                          `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	ServerAddress          *string                          `protobuf:"bytes,6,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPassword         *string                          `protobuf:"bytes,7,opt,name=server_password,json=serverPassword" json:"server_password,omitempty"`
	Rtime32StartTime       *uint32                          `protobuf:"varint,8,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	Rtime32EndTime         *uint32                          `protobuf:"varint,9,opt,name=rtime32_end_time,json=rtime32EndTime" json:"rtime32_end_time,omitempty"`
	CommentCount           *int32                           `protobuf:"varint,10,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	CreatorSteamid         *uint64                          `protobuf:"fixed64,11,opt,name=creator_steamid,json=creatorSteamid" json:"creator_steamid,omitempty"`
	LastUpdateSteamid      *uint64                          `protobuf:"fixed64,12,opt,name=last_update_steamid,json=lastUpdateSteamid" json:"last_update_steamid,omitempty"`
	EventNotes             *string                          `protobuf:"bytes,13,opt,name=event_notes,json=eventNotes" json:"event_notes,omitempty"`
	Jsondata               *string                          `protobuf:"bytes,14,opt,name=jsondata" json:"jsondata,omitempty"`
	AnnouncementBody       *CCommunity_ClanAnnouncementInfo `protobuf:"bytes,15,opt,name=announcement_body,json=announcementBody" json:"announcement_body,omitempty"`
	Published              *bool                            `protobuf:"varint,16,opt,name=published" json:"published,omitempty"`
	Hidden                 *bool                            `protobuf:"varint,17,opt,name=hidden" json:"hidden,omitempty"`
	Rtime32VisibilityStart *uint32                          `protobuf:"varint,18,opt,name=rtime32_visibility_start,json=rtime32VisibilityStart" json:"rtime32_visibility_start,omitempty"`
	Rtime32VisibilityEnd   *uint32                          `protobuf:"varint,19,opt,name=rtime32_visibility_end,json=rtime32VisibilityEnd" json:"rtime32_visibility_end,omitempty"`
	BroadcasterAccountid   *uint32                          `protobuf:"varint,20,opt,name=broadcaster_accountid,json=broadcasterAccountid" json:"broadcaster_accountid,omitempty"`
	FollowerCount          *uint32                          `protobuf:"varint,21,opt,name=follower_count,json=followerCount" json:"follower_count,omitempty"`
	IgnoreCount            *uint32                          `protobuf:"varint,22,opt,name=ignore_count,json=ignoreCount" json:"ignore_count,omitempty"`
	ForumTopicId           *uint64                          `protobuf:"fixed64,23,opt,name=forum_topic_id,json=forumTopicId" json:"forum_topic_id,omitempty"`
	Rtime32LastModified    *uint32                          `protobuf:"varint,24,opt,name=rtime32_last_modified,json=rtime32LastModified" json:"rtime32_last_modified,omitempty"`
	NewsPostGid            *uint64                          `protobuf:"fixed64,25,opt,name=news_post_gid,json=newsPostGid" json:"news_post_gid,omitempty"`
	RtimeModReviewed       *uint32                          `protobuf:"varint,26,opt,name=rtime_mod_reviewed,json=rtimeModReviewed" json:"rtime_mod_reviewed,omitempty"`
	FeaturedAppTagid       *uint32                          `protobuf:"varint,27,opt,name=featured_app_tagid,json=featuredAppTagid" json:"featured_app_tagid,omitempty"`
	ReferencedAppids       []uint32                         `protobuf:"varint,28,rep,name=referenced_appids,json=referencedAppids" json:"referenced_appids,omitempty"`
	BuildId                *uint32                          `protobuf:"varint,29,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	BuildBranch            *string                          `protobuf:"bytes,30,opt,name=build_branch,json=buildBranch" json:"build_branch,omitempty"`
}

// Default values for CClanEventData fields.
const (
	Default_CClanEventData_EventType = EProtoClanEventType_k_EClanOtherEvent
)

func (x *CClanEventData) Reset() {
	*x = CClanEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanEventData) ProtoMessage() {}

func (x *CClanEventData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanEventData.ProtoReflect.Descriptor instead.
func (*CClanEventData) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{14}
}

func (x *CClanEventData) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CClanEventData) GetClanSteamid() uint64 {
	if x != nil && x.ClanSteamid != nil {
		return *x.ClanSteamid
	}
	return 0
}

func (x *CClanEventData) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *CClanEventData) GetEventType() EProtoClanEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Default_CClanEventData_EventType
}

func (x *CClanEventData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClanEventData) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *CClanEventData) GetServerPassword() string {
	if x != nil && x.ServerPassword != nil {
		return *x.ServerPassword
	}
	return ""
}

func (x *CClanEventData) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CClanEventData) GetRtime32EndTime() uint32 {
	if x != nil && x.Rtime32EndTime != nil {
		return *x.Rtime32EndTime
	}
	return 0
}

func (x *CClanEventData) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *CClanEventData) GetCreatorSteamid() uint64 {
	if x != nil && x.CreatorSteamid != nil {
		return *x.CreatorSteamid
	}
	return 0
}

func (x *CClanEventData) GetLastUpdateSteamid() uint64 {
	if x != nil && x.LastUpdateSteamid != nil {
		return *x.LastUpdateSteamid
	}
	return 0
}

func (x *CClanEventData) GetEventNotes() string {
	if x != nil && x.EventNotes != nil {
		return *x.EventNotes
	}
	return ""
}

func (x *CClanEventData) GetJsondata() string {
	if x != nil && x.Jsondata != nil {
		return *x.Jsondata
	}
	return ""
}

func (x *CClanEventData) GetAnnouncementBody() *CCommunity_ClanAnnouncementInfo {
	if x != nil {
		return x.AnnouncementBody
	}
	return nil
}

func (x *CClanEventData) GetPublished() bool {
	if x != nil && x.Published != nil {
		return *x.Published
	}
	return false
}

func (x *CClanEventData) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CClanEventData) GetRtime32VisibilityStart() uint32 {
	if x != nil && x.Rtime32VisibilityStart != nil {
		return *x.Rtime32VisibilityStart
	}
	return 0
}

func (x *CClanEventData) GetRtime32VisibilityEnd() uint32 {
	if x != nil && x.Rtime32VisibilityEnd != nil {
		return *x.Rtime32VisibilityEnd
	}
	return 0
}

func (x *CClanEventData) GetBroadcasterAccountid() uint32 {
	if x != nil && x.BroadcasterAccountid != nil {
		return *x.BroadcasterAccountid
	}
	return 0
}

func (x *CClanEventData) GetFollowerCount() uint32 {
	if x != nil && x.FollowerCount != nil {
		return *x.FollowerCount
	}
	return 0
}

func (x *CClanEventData) GetIgnoreCount() uint32 {
	if x != nil && x.IgnoreCount != nil {
		return *x.IgnoreCount
	}
	return 0
}

func (x *CClanEventData) GetForumTopicId() uint64 {
	if x != nil && x.ForumTopicId != nil {
		return *x.ForumTopicId
	}
	return 0
}

func (x *CClanEventData) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return 0
}

func (x *CClanEventData) GetNewsPostGid() uint64 {
	if x != nil && x.NewsPostGid != nil {
		return *x.NewsPostGid
	}
	return 0
}

func (x *CClanEventData) GetRtimeModReviewed() uint32 {
	if x != nil && x.RtimeModReviewed != nil {
		return *x.RtimeModReviewed
	}
	return 0
}

func (x *CClanEventData) GetFeaturedAppTagid() uint32 {
	if x != nil && x.FeaturedAppTagid != nil {
		return *x.FeaturedAppTagid
	}
	return 0
}

func (x *CClanEventData) GetReferencedAppids() []uint32 {
	if x != nil {
		return x.ReferencedAppids
	}
	return nil
}

func (x *CClanEventData) GetBuildId() uint32 {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return 0
}

func (x *CClanEventData) GetBuildBranch() string {
	if x != nil && x.BuildBranch != nil {
		return *x.BuildBranch
	}
	return ""
}

type CBilling_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName   *string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    *string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Address1    *string `protobuf:"bytes,3,opt,name=address1" json:"address1,omitempty"`
	Address2    *string `protobuf:"bytes,4,opt,name=address2" json:"address2,omitempty"`
	City        *string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UsState     *string `protobuf:"bytes,6,opt,name=us_state,json=usState" json:"us_state,omitempty"`
	CountryCode *string `protobuf:"bytes,7,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Postcode    *string `protobuf:"bytes,8,opt,name=postcode" json:"postcode,omitempty"`
	ZipPlus4    *int32  `protobuf:"varint,9,opt,name=zip_plus4,json=zipPlus4" json:"zip_plus4,omitempty"`
	Phone       *string `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
}

func (x *CBilling_Address) Reset() {
	*x = CBilling_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CBilling_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBilling_Address) ProtoMessage() {}

func (x *CBilling_Address) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBilling_Address.ProtoReflect.Descriptor instead.
func (*CBilling_Address) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{15}
}

func (x *CBilling_Address) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *CBilling_Address) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *CBilling_Address) GetAddress1() string {
	if x != nil && x.Address1 != nil {
		return *x.Address1
	}
	return ""
}

func (x *CBilling_Address) GetAddress2() string {
	if x != nil && x.Address2 != nil {
		return *x.Address2
	}
	return ""
}

func (x *CBilling_Address) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CBilling_Address) GetUsState() string {
	if x != nil && x.UsState != nil {
		return *x.UsState
	}
	return ""
}

func (x *CBilling_Address) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CBilling_Address) GetPostcode() string {
	if x != nil && x.Postcode != nil {
		return *x.Postcode
	}
	return ""
}

func (x *CBilling_Address) GetZipPlus4() int32 {
	if x != nil && x.ZipPlus4 != nil {
		return *x.ZipPlus4
	}
	return 0
}

func (x *CBilling_Address) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type CPackageReservationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid              *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	ReservationState       *int32  `protobuf:"varint,2,opt,name=reservation_state,json=reservationState" json:"reservation_state,omitempty"`
	QueuePosition          *int32  `protobuf:"varint,3,opt,name=queue_position,json=queuePosition" json:"queue_position,omitempty"`
	TotalQueueSize         *int32  `protobuf:"varint,4,opt,name=total_queue_size,json=totalQueueSize" json:"total_queue_size,omitempty"`
	ReservationCountryCode *string `protobuf:"bytes,5,opt,name=reservation_country_code,json=reservationCountryCode" json:"reservation_country_code,omitempty"`
	Expired                *bool   `protobuf:"varint,6,opt,name=expired" json:"expired,omitempty"`
	TimeExpires            *uint32 `protobuf:"varint,7,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	TimeReserved           *uint32 `protobuf:"varint,8,opt,name=time_reserved,json=timeReserved" json:"time_reserved,omitempty"`
}

func (x *CPackageReservationStatus) Reset() {
	*x = CPackageReservationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPackageReservationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPackageReservationStatus) ProtoMessage() {}

func (x *CPackageReservationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPackageReservationStatus.ProtoReflect.Descriptor instead.
func (*CPackageReservationStatus) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{16}
}

func (x *CPackageReservationStatus) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CPackageReservationStatus) GetReservationState() int32 {
	if x != nil && x.ReservationState != nil {
		return *x.ReservationState
	}
	return 0
}

func (x *CPackageReservationStatus) GetQueuePosition() int32 {
	if x != nil && x.QueuePosition != nil {
		return *x.QueuePosition
	}
	return 0
}

func (x *CPackageReservationStatus) GetTotalQueueSize() int32 {
	if x != nil && x.TotalQueueSize != nil {
		return *x.TotalQueueSize
	}
	return 0
}

func (x *CPackageReservationStatus) GetReservationCountryCode() string {
	if x != nil && x.ReservationCountryCode != nil {
		return *x.ReservationCountryCode
	}
	return ""
}

func (x *CPackageReservationStatus) GetExpired() bool {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return false
}

func (x *CPackageReservationStatus) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CPackageReservationStatus) GetTimeReserved() uint32 {
	if x != nil && x.TimeReserved != nil {
		return *x.TimeReserved
	}
	return 0
}

type CMsgKeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgKeyValuePair) Reset() {
	*x = CMsgKeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgKeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgKeyValuePair) ProtoMessage() {}

func (x *CMsgKeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgKeyValuePair.ProtoReflect.Descriptor instead.
func (*CMsgKeyValuePair) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgKeyValuePair) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgKeyValuePair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgKeyValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*CMsgKeyValuePair `protobuf:"bytes,1,rep,name=pairs" json:"pairs,omitempty"`
}

func (x *CMsgKeyValueSet) Reset() {
	*x = CMsgKeyValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgKeyValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgKeyValueSet) ProtoMessage() {}

func (x *CMsgKeyValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgKeyValueSet.ProtoReflect.Descriptor instead.
func (*CMsgKeyValueSet) Descriptor() ([]byte, []int) {
	return file_steammessages_base_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgKeyValueSet) GetPairs() []*CMsgKeyValuePair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

var file_steammessages_base_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor_proto.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50000,
		Name:          "msgpool_soft_limit",
		Tag:           "varint,50000,opt,name=msgpool_soft_limit,def=32",
		Filename:      "steammessages_base.proto",
	},
	{
		ExtendedType:  (*descriptor_proto.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50001,
		Name:          "msgpool_hard_limit",
		Tag:           "varint,50001,opt,name=msgpool_hard_limit,def=384",
		Filename:      "steammessages_base.proto",
	},
	{
		ExtendedType:  (*descriptor_proto.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50000,
		Name:          "force_php_generation",
		Tag:           "varint,50000,opt,name=force_php_generation,def=0",
		Filename:      "steammessages_base.proto",
	},
	{
		ExtendedType:  (*descriptor_proto.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50020,
		Name:          "php_output_always_number",
		Tag:           "varint,50020,opt,name=php_output_always_number,def=0",
		Filename:      "steammessages_base.proto",
	},
	{
		ExtendedType:  (*descriptor_proto.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50024,
		Name:          "allow_field_named_steam_id",
		Tag:           "varint,50024,opt,name=allow_field_named_steam_id,def=0",
		Filename:      "steammessages_base.proto",
	},
}

// Extension fields to descriptor_proto.MessageOptions.
var (
	// optional int32 msgpool_soft_limit = 50000;
	E_MsgpoolSoftLimit = &file_steammessages_base_proto_extTypes[0]
	// optional int32 msgpool_hard_limit = 50001;
	E_MsgpoolHardLimit = &file_steammessages_base_proto_extTypes[1]
)

// Extension fields to descriptor_proto.FileOptions.
var (
	// optional bool force_php_generation = 50000;
	E_ForcePhpGeneration = &file_steammessages_base_proto_extTypes[2]
)

// Extension fields to descriptor_proto.FieldOptions.
var (
	// optional bool php_output_always_number = 50020;
	E_PhpOutputAlwaysNumber = &file_steammessages_base_proto_extTypes[3]
	// optional bool allow_field_named_steam_id = 50024;
	E_AllowFieldNamedSteamId = &file_steammessages_base_proto_extTypes[4]
)

var File_steammessages_base_proto protoreflect.FileDescriptor

var file_steammessages_base_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x02, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x02, 0x76, 0x34, 0x12,
	0x10, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x76,
	0x36, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x70, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x6c, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x67, 0x63, 0x69,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x73, 0x74, 0x47, 0x63, 0x69, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x64,
	0x73, 0x74, 0x5f, 0x67, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x47, 0x63, 0x44, 0x69, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xa3, 0x09, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x75, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34,
	0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31,
	0x35, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37,
	0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x69,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34,
	0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x79, 0x73,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x5f, 0x73, 0x79, 0x73, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6d, 0x53, 0x79, 0x73, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0d,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x21, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x75, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x47, 0x63, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x15, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x76,
	0x36, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x56, 0x36, 0x42,
	0x09, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x22, 0x53, 0x0a, 0x09, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x75, 0x6e, 0x7a, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x7a, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x38, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x72, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0xb7, 0x04, 0x0a, 0x14, 0x43, 0x43, 0x44, 0x44, 0x42, 0x41, 0x70, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x73, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68,
	0x61, 0x73, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x73, 0x22, 0xbb, 0x05, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x65, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x04, 0x0a, 0x13, 0x43, 0x43,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x61, 0x67, 0x69, 0x64, 0x73, 0x43, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe6, 0x02, 0x0a, 0x17, 0x43, 0x43, 0x6c, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0xac, 0x01, 0x0a, 0x16, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xca,
	0x04, 0x0a, 0x1f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x75, 0x70, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x75, 0x70,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x62,
	0x61, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x23,
	0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xde, 0x09, 0x0a, 0x0e,
	0x43, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x61, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33,
	0x32, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x61, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x47, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x54, 0x61, 0x67, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xa7, 0x02, 0x0a,
	0x10, 0x43, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x34,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x7a, 0x69, 0x70, 0x50, 0x6c, 0x75, 0x73, 0x34,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x19, 0x43, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x10,
	0x43, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0f, 0x43, 0x4d,
	0x73, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2a, 0xd8, 0x02, 0x0a, 0x16, 0x45, 0x42, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x55, 0x6e, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x79, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x10, 0x32, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x4b, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x42,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10,
	0x64, 0x2a, 0xeb, 0x07, 0x0a, 0x13, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x61, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x41, 0x6e, 0x64, 0x41, 0x72, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x61, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0e,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x44, 0x4c, 0x43, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x76, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x12, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61,
	0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x58, 0x50, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x17, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x18, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x19, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1a, 0x12, 0x13,
	0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x52, 0x4c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x4e, 0x65,
	0x77, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61,
	0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x22,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x23, 0x2a,
	0x81, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x03, 0x3a, 0x53, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x33, 0x32, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x53,
	0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x54, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x33, 0x38, 0x34, 0x52, 0x10, 0x6d, 0x73,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x57,
	0x0a, 0x14, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x68, 0x70, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x5f, 0x0a, 0x18, 0x70, 0x68, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xe4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x70, 0x68, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x62, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x42, 0x09, 0x80, 0xb5,
	0x18, 0x01, 0x48, 0x01, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_base_proto_rawDescOnce sync.Once
	file_steammessages_base_proto_rawDescData = file_steammessages_base_proto_rawDesc
)

func file_steammessages_base_proto_rawDescGZIP() []byte {
	file_steammessages_base_proto_rawDescOnce.Do(func() {
		file_steammessages_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_base_proto_rawDescData)
	})
	return file_steammessages_base_proto_rawDescData
}

var file_steammessages_base_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_base_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_steammessages_base_proto_goTypes = []interface{}{
	(EBanContentCheckResult)(0),             // 0: EBanContentCheckResult
	(EProtoClanEventType)(0),                // 1: EProtoClanEventType
	(PartnerEventNotificationType)(0),       // 2: PartnerEventNotificationType
	(*CMsgIPAddress)(nil),                   // 3: CMsgIPAddress
	(*CMsgIPAddressBucket)(nil),             // 4: CMsgIPAddressBucket
	(*CMsgGCRoutingProtoBufHeader)(nil),     // 5: CMsgGCRoutingProtoBufHeader
	(*CMsgProtoBufHeader)(nil),              // 6: CMsgProtoBufHeader
	(*CMsgMulti)(nil),                       // 7: CMsgMulti
	(*CMsgProtobufWrapped)(nil),             // 8: CMsgProtobufWrapped
	(*CMsgAuthTicket)(nil),                  // 9: CMsgAuthTicket
	(*CCDDBAppDetailCommon)(nil),            // 10: CCDDBAppDetailCommon
	(*CMsgAppRights)(nil),                   // 11: CMsgAppRights
	(*CCuratorPreferences)(nil),             // 12: CCuratorPreferences
	(*CLocalizationToken)(nil),              // 13: CLocalizationToken
	(*CClanEventUserNewsTuple)(nil),         // 14: CClanEventUserNewsTuple
	(*CClanMatchEventByRange)(nil),          // 15: CClanMatchEventByRange
	(*CCommunity_ClanAnnouncementInfo)(nil), // 16: CCommunity_ClanAnnouncementInfo
	(*CClanEventData)(nil),                  // 17: CClanEventData
	(*CBilling_Address)(nil),                // 18: CBilling_Address
	(*CPackageReservationStatus)(nil),       // 19: CPackageReservationStatus
	(*CMsgKeyValuePair)(nil),                // 20: CMsgKeyValuePair
	(*CMsgKeyValueSet)(nil),                 // 21: CMsgKeyValueSet
	(*descriptor_proto.MessageOptions)(nil), // 22: google.protobuf.MessageOptions
	(*descriptor_proto.FileOptions)(nil),    // 23: google.protobuf.FileOptions
	(*descriptor_proto.FieldOptions)(nil),   // 24: google.protobuf.FieldOptions
}
var file_steammessages_base_proto_depIdxs = []int32{
	3,  // 0: CMsgIPAddressBucket.original_ip_address:type_name -> CMsgIPAddress
	5,  // 1: CMsgProtoBufHeader.routing_gc:type_name -> CMsgGCRoutingProtoBufHeader
	14, // 2: CClanMatchEventByRange.events:type_name -> CClanEventUserNewsTuple
	0,  // 3: CCommunity_ClanAnnouncementInfo.ban_check_result:type_name -> EBanContentCheckResult
	1,  // 4: CClanEventData.event_type:type_name -> EProtoClanEventType
	16, // 5: CClanEventData.announcement_body:type_name -> CCommunity_ClanAnnouncementInfo
	20, // 6: CMsgKeyValueSet.pairs:type_name -> CMsgKeyValuePair
	22, // 7: msgpool_soft_limit:extendee -> google.protobuf.MessageOptions
	22, // 8: msgpool_hard_limit:extendee -> google.protobuf.MessageOptions
	23, // 9: force_php_generation:extendee -> google.protobuf.FileOptions
	24, // 10: php_output_always_number:extendee -> google.protobuf.FieldOptions
	24, // 11: allow_field_named_steam_id:extendee -> google.protobuf.FieldOptions
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	7,  // [7:12] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steammessages_base_proto_init() }
func file_steammessages_base_proto_init() {
	if File_steammessages_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIPAddressBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRoutingProtoBufHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProtoBufHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProtobufWrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAuthTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCDDBAppDetailCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAppRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCuratorPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLocalizationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanEventUserNewsTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanMatchEventByRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClanAnnouncementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CBilling_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPackageReservationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgKeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgKeyValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steammessages_base_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CMsgIPAddress_V4)(nil),
		(*CMsgIPAddress_V6)(nil),
	}
	file_steammessages_base_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CMsgProtoBufHeader_Ip)(nil),
		(*CMsgProtoBufHeader_IpV6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_base_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_base_proto_goTypes,
		DependencyIndexes: file_steammessages_base_proto_depIdxs,
		EnumInfos:         file_steammessages_base_proto_enumTypes,
		MessageInfos:      file_steammessages_base_proto_msgTypes,
		ExtensionInfos:    file_steammessages_base_proto_extTypes,
	}.Build()
	File_steammessages_base_proto = out.File
	file_steammessages_base_proto_rawDesc = nil
	file_steammessages_base_proto_goTypes = nil
	file_steammessages_base_proto_depIdxs = nil
}
