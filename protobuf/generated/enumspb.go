// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: enums.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPublishedFileQueryType int32

const (
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVote                                  EPublishedFileQueryType = 0
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPublicationDate                       EPublishedFileQueryType = 1
	EPublishedFileQueryType_k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate         EPublishedFileQueryType = 2
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTrend                                 EPublishedFileQueryType = 3
	EPublishedFileQueryType_k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate     EPublishedFileQueryType = 4
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate       EPublishedFileQueryType = 5
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByNumTimesReported                      EPublishedFileQueryType = 6
	EPublishedFileQueryType_k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate EPublishedFileQueryType = 7
	EPublishedFileQueryType_k_PublishedFileQueryType_NotYetRated                                   EPublishedFileQueryType = 8
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions              EPublishedFileQueryType = 9
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalVotesAsc                         EPublishedFileQueryType = 10
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByVotesUp                               EPublishedFileQueryType = 11
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTextSearch                            EPublishedFileQueryType = 12
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeTrend                         EPublishedFileQueryType = 13
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByTotalPlaytime                         EPublishedFileQueryType = 14
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByAveragePlaytimeTrend                  EPublishedFileQueryType = 15
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime               EPublishedFileQueryType = 16
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend                 EPublishedFileQueryType = 17
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions              EPublishedFileQueryType = 18
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByInappropriateContentRating            EPublishedFileQueryType = 19
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByBanContentCheck                       EPublishedFileQueryType = 20
	EPublishedFileQueryType_k_PublishedFileQueryType_RankedByLastUpdatedDate                       EPublishedFileQueryType = 21
)

// Enum value maps for EPublishedFileQueryType.
var (
	EPublishedFileQueryType_name = map[int32]string{
		0:  "k_PublishedFileQueryType_RankedByVote",
		1:  "k_PublishedFileQueryType_RankedByPublicationDate",
		2:  "k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate",
		3:  "k_PublishedFileQueryType_RankedByTrend",
		4:  "k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate",
		5:  "k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate",
		6:  "k_PublishedFileQueryType_RankedByNumTimesReported",
		7:  "k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate",
		8:  "k_PublishedFileQueryType_NotYetRated",
		9:  "k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions",
		10: "k_PublishedFileQueryType_RankedByTotalVotesAsc",
		11: "k_PublishedFileQueryType_RankedByVotesUp",
		12: "k_PublishedFileQueryType_RankedByTextSearch",
		13: "k_PublishedFileQueryType_RankedByPlaytimeTrend",
		14: "k_PublishedFileQueryType_RankedByTotalPlaytime",
		15: "k_PublishedFileQueryType_RankedByAveragePlaytimeTrend",
		16: "k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime",
		17: "k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend",
		18: "k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions",
		19: "k_PublishedFileQueryType_RankedByInappropriateContentRating",
		20: "k_PublishedFileQueryType_RankedByBanContentCheck",
		21: "k_PublishedFileQueryType_RankedByLastUpdatedDate",
	}
	EPublishedFileQueryType_value = map[string]int32{
		"k_PublishedFileQueryType_RankedByVote":                                  0,
		"k_PublishedFileQueryType_RankedByPublicationDate":                       1,
		"k_PublishedFileQueryType_AcceptedForGameRankedByAcceptanceDate":         2,
		"k_PublishedFileQueryType_RankedByTrend":                                 3,
		"k_PublishedFileQueryType_FavoritedByFriendsRankedByPublicationDate":     4,
		"k_PublishedFileQueryType_CreatedByFriendsRankedByPublicationDate":       5,
		"k_PublishedFileQueryType_RankedByNumTimesReported":                      6,
		"k_PublishedFileQueryType_CreatedByFollowedUsersRankedByPublicationDate": 7,
		"k_PublishedFileQueryType_NotYetRated":                                   8,
		"k_PublishedFileQueryType_RankedByTotalUniqueSubscriptions":              9,
		"k_PublishedFileQueryType_RankedByTotalVotesAsc":                         10,
		"k_PublishedFileQueryType_RankedByVotesUp":                               11,
		"k_PublishedFileQueryType_RankedByTextSearch":                            12,
		"k_PublishedFileQueryType_RankedByPlaytimeTrend":                         13,
		"k_PublishedFileQueryType_RankedByTotalPlaytime":                         14,
		"k_PublishedFileQueryType_RankedByAveragePlaytimeTrend":                  15,
		"k_PublishedFileQueryType_RankedByLifetimeAveragePlaytime":               16,
		"k_PublishedFileQueryType_RankedByPlaytimeSessionsTrend":                 17,
		"k_PublishedFileQueryType_RankedByLifetimePlaytimeSessions":              18,
		"k_PublishedFileQueryType_RankedByInappropriateContentRating":            19,
		"k_PublishedFileQueryType_RankedByBanContentCheck":                       20,
		"k_PublishedFileQueryType_RankedByLastUpdatedDate":                       21,
	}
)

func (x EPublishedFileQueryType) Enum() *EPublishedFileQueryType {
	p := new(EPublishedFileQueryType)
	*p = x
	return p
}

func (x EPublishedFileQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (EPublishedFileQueryType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x EPublishedFileQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileQueryType(num)
	return nil
}

// Deprecated: Use EPublishedFileQueryType.Descriptor instead.
func (EPublishedFileQueryType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type EPublishedFileInappropriateProvider int32

const (
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Invalid EPublishedFileInappropriateProvider = 0
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Google  EPublishedFileInappropriateProvider = 1
	EPublishedFileInappropriateProvider_k_EPublishedFileInappropriateProvider_Amazon  EPublishedFileInappropriateProvider = 2
)

// Enum value maps for EPublishedFileInappropriateProvider.
var (
	EPublishedFileInappropriateProvider_name = map[int32]string{
		0: "k_EPublishedFileInappropriateProvider_Invalid",
		1: "k_EPublishedFileInappropriateProvider_Google",
		2: "k_EPublishedFileInappropriateProvider_Amazon",
	}
	EPublishedFileInappropriateProvider_value = map[string]int32{
		"k_EPublishedFileInappropriateProvider_Invalid": 0,
		"k_EPublishedFileInappropriateProvider_Google":  1,
		"k_EPublishedFileInappropriateProvider_Amazon":  2,
	}
)

func (x EPublishedFileInappropriateProvider) Enum() *EPublishedFileInappropriateProvider {
	p := new(EPublishedFileInappropriateProvider)
	*p = x
	return p
}

func (x EPublishedFileInappropriateProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (EPublishedFileInappropriateProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x EPublishedFileInappropriateProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateProvider(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateProvider.Descriptor instead.
func (EPublishedFileInappropriateProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type EPublishedFileInappropriateResult int32

const (
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_NotScanned   EPublishedFileInappropriateResult = 0
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryUnlikely EPublishedFileInappropriateResult = 1
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Unlikely     EPublishedFileInappropriateResult = 30
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Possible     EPublishedFileInappropriateResult = 50
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_Likely       EPublishedFileInappropriateResult = 75
	EPublishedFileInappropriateResult_k_EPublishedFileInappropriateResult_VeryLikely   EPublishedFileInappropriateResult = 100
)

// Enum value maps for EPublishedFileInappropriateResult.
var (
	EPublishedFileInappropriateResult_name = map[int32]string{
		0:   "k_EPublishedFileInappropriateResult_NotScanned",
		1:   "k_EPublishedFileInappropriateResult_VeryUnlikely",
		30:  "k_EPublishedFileInappropriateResult_Unlikely",
		50:  "k_EPublishedFileInappropriateResult_Possible",
		75:  "k_EPublishedFileInappropriateResult_Likely",
		100: "k_EPublishedFileInappropriateResult_VeryLikely",
	}
	EPublishedFileInappropriateResult_value = map[string]int32{
		"k_EPublishedFileInappropriateResult_NotScanned":   0,
		"k_EPublishedFileInappropriateResult_VeryUnlikely": 1,
		"k_EPublishedFileInappropriateResult_Unlikely":     30,
		"k_EPublishedFileInappropriateResult_Possible":     50,
		"k_EPublishedFileInappropriateResult_Likely":       75,
		"k_EPublishedFileInappropriateResult_VeryLikely":   100,
	}
)

func (x EPublishedFileInappropriateResult) Enum() *EPublishedFileInappropriateResult {
	p := new(EPublishedFileInappropriateResult)
	*p = x
	return p
}

func (x EPublishedFileInappropriateResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileInappropriateResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (EPublishedFileInappropriateResult) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x EPublishedFileInappropriateResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileInappropriateResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileInappropriateResult(num)
	return nil
}

// Deprecated: Use EPublishedFileInappropriateResult.Descriptor instead.
func (EPublishedFileInappropriateResult) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type EPersonaStateFlag int32

const (
	EPersonaStateFlag_k_EPersonaStateFlag_HasRichPresence      EPersonaStateFlag = 1
	EPersonaStateFlag_k_EPersonaStateFlag_InJoinableGame       EPersonaStateFlag = 2
	EPersonaStateFlag_k_EPersonaStateFlag_Golden               EPersonaStateFlag = 4
	EPersonaStateFlag_k_EPersonaStateFlag_RemotePlayTogether   EPersonaStateFlag = 8
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeWeb        EPersonaStateFlag = 256
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeMobile     EPersonaStateFlag = 512
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeTenfoot    EPersonaStateFlag = 1024
	EPersonaStateFlag_k_EPersonaStateFlag_ClientTypeVR         EPersonaStateFlag = 2048
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeGamepad    EPersonaStateFlag = 4096
	EPersonaStateFlag_k_EPersonaStateFlag_LaunchTypeCompatTool EPersonaStateFlag = 8192
)

// Enum value maps for EPersonaStateFlag.
var (
	EPersonaStateFlag_name = map[int32]string{
		1:    "k_EPersonaStateFlag_HasRichPresence",
		2:    "k_EPersonaStateFlag_InJoinableGame",
		4:    "k_EPersonaStateFlag_Golden",
		8:    "k_EPersonaStateFlag_RemotePlayTogether",
		256:  "k_EPersonaStateFlag_ClientTypeWeb",
		512:  "k_EPersonaStateFlag_ClientTypeMobile",
		1024: "k_EPersonaStateFlag_ClientTypeTenfoot",
		2048: "k_EPersonaStateFlag_ClientTypeVR",
		4096: "k_EPersonaStateFlag_LaunchTypeGamepad",
		8192: "k_EPersonaStateFlag_LaunchTypeCompatTool",
	}
	EPersonaStateFlag_value = map[string]int32{
		"k_EPersonaStateFlag_HasRichPresence":      1,
		"k_EPersonaStateFlag_InJoinableGame":       2,
		"k_EPersonaStateFlag_Golden":               4,
		"k_EPersonaStateFlag_RemotePlayTogether":   8,
		"k_EPersonaStateFlag_ClientTypeWeb":        256,
		"k_EPersonaStateFlag_ClientTypeMobile":     512,
		"k_EPersonaStateFlag_ClientTypeTenfoot":    1024,
		"k_EPersonaStateFlag_ClientTypeVR":         2048,
		"k_EPersonaStateFlag_LaunchTypeGamepad":    4096,
		"k_EPersonaStateFlag_LaunchTypeCompatTool": 8192,
	}
)

func (x EPersonaStateFlag) Enum() *EPersonaStateFlag {
	p := new(EPersonaStateFlag)
	*p = x
	return p
}

func (x EPersonaStateFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPersonaStateFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (EPersonaStateFlag) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x EPersonaStateFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPersonaStateFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPersonaStateFlag(num)
	return nil
}

// Deprecated: Use EPersonaStateFlag.Descriptor instead.
func (EPersonaStateFlag) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type EContentCheckProvider int32

const (
	EContentCheckProvider_k_EContentCheckProvider_Invalid EContentCheckProvider = 0
	EContentCheckProvider_k_EContentCheckProvider_Google  EContentCheckProvider = 1
	EContentCheckProvider_k_EContentCheckProvider_Amazon  EContentCheckProvider = 2
	EContentCheckProvider_k_EContentCheckProvider_Local   EContentCheckProvider = 3
)

// Enum value maps for EContentCheckProvider.
var (
	EContentCheckProvider_name = map[int32]string{
		0: "k_EContentCheckProvider_Invalid",
		1: "k_EContentCheckProvider_Google",
		2: "k_EContentCheckProvider_Amazon",
		3: "k_EContentCheckProvider_Local",
	}
	EContentCheckProvider_value = map[string]int32{
		"k_EContentCheckProvider_Invalid": 0,
		"k_EContentCheckProvider_Google":  1,
		"k_EContentCheckProvider_Amazon":  2,
		"k_EContentCheckProvider_Local":   3,
	}
)

func (x EContentCheckProvider) Enum() *EContentCheckProvider {
	p := new(EContentCheckProvider)
	*p = x
	return p
}

func (x EContentCheckProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EContentCheckProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (EContentCheckProvider) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x EContentCheckProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EContentCheckProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EContentCheckProvider(num)
	return nil
}

// Deprecated: Use EContentCheckProvider.Descriptor instead.
func (EContentCheckProvider) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type EProfileCustomizationType int32

const (
	EProfileCustomizationType_k_EProfileCustomizationTypeInvalid                   EProfileCustomizationType = 0
	EProfileCustomizationType_k_EProfileCustomizationTypeRareAchievementShowcase   EProfileCustomizationType = 1
	EProfileCustomizationType_k_EProfileCustomizationTypeGameCollector             EProfileCustomizationType = 2
	EProfileCustomizationType_k_EProfileCustomizationTypeItemShowcase              EProfileCustomizationType = 3
	EProfileCustomizationType_k_EProfileCustomizationTypeTradeShowcase             EProfileCustomizationType = 4
	EProfileCustomizationType_k_EProfileCustomizationTypeBadges                    EProfileCustomizationType = 5
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGame              EProfileCustomizationType = 6
	EProfileCustomizationType_k_EProfileCustomizationTypeScreenshotShowcase        EProfileCustomizationType = 7
	EProfileCustomizationType_k_EProfileCustomizationTypeCustomText                EProfileCustomizationType = 8
	EProfileCustomizationType_k_EProfileCustomizationTypeFavoriteGroup             EProfileCustomizationType = 9
	EProfileCustomizationType_k_EProfileCustomizationTypeRecommendation            EProfileCustomizationType = 10
	EProfileCustomizationType_k_EProfileCustomizationTypeWorkshopItem              EProfileCustomizationType = 11
	EProfileCustomizationType_k_EProfileCustomizationTypeMyWorkshop                EProfileCustomizationType = 12
	EProfileCustomizationType_k_EProfileCustomizationTypeArtworkShowcase           EProfileCustomizationType = 13
	EProfileCustomizationType_k_EProfileCustomizationTypeVideoShowcase             EProfileCustomizationType = 14
	EProfileCustomizationType_k_EProfileCustomizationTypeGuides                    EProfileCustomizationType = 15
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGuides                  EProfileCustomizationType = 16
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievements              EProfileCustomizationType = 17
	EProfileCustomizationType_k_EProfileCustomizationTypeGreenlight                EProfileCustomizationType = 18
	EProfileCustomizationType_k_EProfileCustomizationTypeMyGreenlight              EProfileCustomizationType = 19
	EProfileCustomizationType_k_EProfileCustomizationTypeSalien                    EProfileCustomizationType = 20
	EProfileCustomizationType_k_EProfileCustomizationTypeLoyaltyRewardReactions    EProfileCustomizationType = 21
	EProfileCustomizationType_k_EProfileCustomizationTypeSingleArtworkShowcase     EProfileCustomizationType = 22
	EProfileCustomizationType_k_EProfileCustomizationTypeAchievementsCompletionist EProfileCustomizationType = 23
)

// Enum value maps for EProfileCustomizationType.
var (
	EProfileCustomizationType_name = map[int32]string{
		0:  "k_EProfileCustomizationTypeInvalid",
		1:  "k_EProfileCustomizationTypeRareAchievementShowcase",
		2:  "k_EProfileCustomizationTypeGameCollector",
		3:  "k_EProfileCustomizationTypeItemShowcase",
		4:  "k_EProfileCustomizationTypeTradeShowcase",
		5:  "k_EProfileCustomizationTypeBadges",
		6:  "k_EProfileCustomizationTypeFavoriteGame",
		7:  "k_EProfileCustomizationTypeScreenshotShowcase",
		8:  "k_EProfileCustomizationTypeCustomText",
		9:  "k_EProfileCustomizationTypeFavoriteGroup",
		10: "k_EProfileCustomizationTypeRecommendation",
		11: "k_EProfileCustomizationTypeWorkshopItem",
		12: "k_EProfileCustomizationTypeMyWorkshop",
		13: "k_EProfileCustomizationTypeArtworkShowcase",
		14: "k_EProfileCustomizationTypeVideoShowcase",
		15: "k_EProfileCustomizationTypeGuides",
		16: "k_EProfileCustomizationTypeMyGuides",
		17: "k_EProfileCustomizationTypeAchievements",
		18: "k_EProfileCustomizationTypeGreenlight",
		19: "k_EProfileCustomizationTypeMyGreenlight",
		20: "k_EProfileCustomizationTypeSalien",
		21: "k_EProfileCustomizationTypeLoyaltyRewardReactions",
		22: "k_EProfileCustomizationTypeSingleArtworkShowcase",
		23: "k_EProfileCustomizationTypeAchievementsCompletionist",
	}
	EProfileCustomizationType_value = map[string]int32{
		"k_EProfileCustomizationTypeInvalid":                   0,
		"k_EProfileCustomizationTypeRareAchievementShowcase":   1,
		"k_EProfileCustomizationTypeGameCollector":             2,
		"k_EProfileCustomizationTypeItemShowcase":              3,
		"k_EProfileCustomizationTypeTradeShowcase":             4,
		"k_EProfileCustomizationTypeBadges":                    5,
		"k_EProfileCustomizationTypeFavoriteGame":              6,
		"k_EProfileCustomizationTypeScreenshotShowcase":        7,
		"k_EProfileCustomizationTypeCustomText":                8,
		"k_EProfileCustomizationTypeFavoriteGroup":             9,
		"k_EProfileCustomizationTypeRecommendation":            10,
		"k_EProfileCustomizationTypeWorkshopItem":              11,
		"k_EProfileCustomizationTypeMyWorkshop":                12,
		"k_EProfileCustomizationTypeArtworkShowcase":           13,
		"k_EProfileCustomizationTypeVideoShowcase":             14,
		"k_EProfileCustomizationTypeGuides":                    15,
		"k_EProfileCustomizationTypeMyGuides":                  16,
		"k_EProfileCustomizationTypeAchievements":              17,
		"k_EProfileCustomizationTypeGreenlight":                18,
		"k_EProfileCustomizationTypeMyGreenlight":              19,
		"k_EProfileCustomizationTypeSalien":                    20,
		"k_EProfileCustomizationTypeLoyaltyRewardReactions":    21,
		"k_EProfileCustomizationTypeSingleArtworkShowcase":     22,
		"k_EProfileCustomizationTypeAchievementsCompletionist": 23,
	}
)

func (x EProfileCustomizationType) Enum() *EProfileCustomizationType {
	p := new(EProfileCustomizationType)
	*p = x
	return p
}

func (x EProfileCustomizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfileCustomizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (EProfileCustomizationType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x EProfileCustomizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfileCustomizationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfileCustomizationType(num)
	return nil
}

// Deprecated: Use EProfileCustomizationType.Descriptor instead.
func (EProfileCustomizationType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type EPublishedFileStorageSystem int32

const (
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemInvalid     EPublishedFileStorageSystem = 0
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemLegacyCloud EPublishedFileStorageSystem = 1
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemDepot       EPublishedFileStorageSystem = 2
	EPublishedFileStorageSystem_k_EPublishedFileStorageSystemUGCCloud    EPublishedFileStorageSystem = 3
)

// Enum value maps for EPublishedFileStorageSystem.
var (
	EPublishedFileStorageSystem_name = map[int32]string{
		0: "k_EPublishedFileStorageSystemInvalid",
		1: "k_EPublishedFileStorageSystemLegacyCloud",
		2: "k_EPublishedFileStorageSystemDepot",
		3: "k_EPublishedFileStorageSystemUGCCloud",
	}
	EPublishedFileStorageSystem_value = map[string]int32{
		"k_EPublishedFileStorageSystemInvalid":     0,
		"k_EPublishedFileStorageSystemLegacyCloud": 1,
		"k_EPublishedFileStorageSystemDepot":       2,
		"k_EPublishedFileStorageSystemUGCCloud":    3,
	}
)

func (x EPublishedFileStorageSystem) Enum() *EPublishedFileStorageSystem {
	p := new(EPublishedFileStorageSystem)
	*p = x
	return p
}

func (x EPublishedFileStorageSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileStorageSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (EPublishedFileStorageSystem) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x EPublishedFileStorageSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileStorageSystem) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileStorageSystem(num)
	return nil
}

// Deprecated: Use EPublishedFileStorageSystem.Descriptor instead.
func (EPublishedFileStorageSystem) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type ECloudStoragePersistState int32

const (
	ECloudStoragePersistState_k_ECloudStoragePersistStatePersisted ECloudStoragePersistState = 0
	ECloudStoragePersistState_k_ECloudStoragePersistStateForgotten ECloudStoragePersistState = 1
	ECloudStoragePersistState_k_ECloudStoragePersistStateDeleted   ECloudStoragePersistState = 2
)

// Enum value maps for ECloudStoragePersistState.
var (
	ECloudStoragePersistState_name = map[int32]string{
		0: "k_ECloudStoragePersistStatePersisted",
		1: "k_ECloudStoragePersistStateForgotten",
		2: "k_ECloudStoragePersistStateDeleted",
	}
	ECloudStoragePersistState_value = map[string]int32{
		"k_ECloudStoragePersistStatePersisted": 0,
		"k_ECloudStoragePersistStateForgotten": 1,
		"k_ECloudStoragePersistStateDeleted":   2,
	}
)

func (x ECloudStoragePersistState) Enum() *ECloudStoragePersistState {
	p := new(ECloudStoragePersistState)
	*p = x
	return p
}

func (x ECloudStoragePersistState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudStoragePersistState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (ECloudStoragePersistState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x ECloudStoragePersistState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudStoragePersistState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudStoragePersistState(num)
	return nil
}

// Deprecated: Use ECloudStoragePersistState.Descriptor instead.
func (ECloudStoragePersistState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type ESDCardFormatStage int32

const (
	ESDCardFormatStage_k_ESDCardFormatStage_Invalid    ESDCardFormatStage = 0
	ESDCardFormatStage_k_ESDCardFormatStage_Starting   ESDCardFormatStage = 1
	ESDCardFormatStage_k_ESDCardFormatStage_Testing    ESDCardFormatStage = 2
	ESDCardFormatStage_k_ESDCardFormatStage_Rescuing   ESDCardFormatStage = 3
	ESDCardFormatStage_k_ESDCardFormatStage_Formatting ESDCardFormatStage = 4
	ESDCardFormatStage_k_ESDCardFormatStage_Finalizing ESDCardFormatStage = 5
)

// Enum value maps for ESDCardFormatStage.
var (
	ESDCardFormatStage_name = map[int32]string{
		0: "k_ESDCardFormatStage_Invalid",
		1: "k_ESDCardFormatStage_Starting",
		2: "k_ESDCardFormatStage_Testing",
		3: "k_ESDCardFormatStage_Rescuing",
		4: "k_ESDCardFormatStage_Formatting",
		5: "k_ESDCardFormatStage_Finalizing",
	}
	ESDCardFormatStage_value = map[string]int32{
		"k_ESDCardFormatStage_Invalid":    0,
		"k_ESDCardFormatStage_Starting":   1,
		"k_ESDCardFormatStage_Testing":    2,
		"k_ESDCardFormatStage_Rescuing":   3,
		"k_ESDCardFormatStage_Formatting": 4,
		"k_ESDCardFormatStage_Finalizing": 5,
	}
)

func (x ESDCardFormatStage) Enum() *ESDCardFormatStage {
	p := new(ESDCardFormatStage)
	*p = x
	return p
}

func (x ESDCardFormatStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESDCardFormatStage) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (ESDCardFormatStage) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x ESDCardFormatStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESDCardFormatStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESDCardFormatStage(num)
	return nil
}

// Deprecated: Use ESDCardFormatStage.Descriptor instead.
func (ESDCardFormatStage) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type ESystemFanControlMode int32

const (
	ESystemFanControlMode_k_SystemFanControlMode_Invalid  ESystemFanControlMode = 0
	ESystemFanControlMode_k_SystemFanControlMode_Disabled ESystemFanControlMode = 1
	ESystemFanControlMode_k_SystemFanControlMode_Default  ESystemFanControlMode = 2
)

// Enum value maps for ESystemFanControlMode.
var (
	ESystemFanControlMode_name = map[int32]string{
		0: "k_SystemFanControlMode_Invalid",
		1: "k_SystemFanControlMode_Disabled",
		2: "k_SystemFanControlMode_Default",
	}
	ESystemFanControlMode_value = map[string]int32{
		"k_SystemFanControlMode_Invalid":  0,
		"k_SystemFanControlMode_Disabled": 1,
		"k_SystemFanControlMode_Default":  2,
	}
)

func (x ESystemFanControlMode) Enum() *ESystemFanControlMode {
	p := new(ESystemFanControlMode)
	*p = x
	return p
}

func (x ESystemFanControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemFanControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (ESystemFanControlMode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x ESystemFanControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemFanControlMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemFanControlMode(num)
	return nil
}

// Deprecated: Use ESystemFanControlMode.Descriptor instead.
func (ESystemFanControlMode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type EColorProfile int32

const (
	EColorProfile_k_EColorProfile_Invalid  EColorProfile = 0
	EColorProfile_k_EColorProfile_Native   EColorProfile = 1
	EColorProfile_k_EColorProfile_Standard EColorProfile = 2
	EColorProfile_k_EColorProfile_Vivid    EColorProfile = 3
)

// Enum value maps for EColorProfile.
var (
	EColorProfile_name = map[int32]string{
		0: "k_EColorProfile_Invalid",
		1: "k_EColorProfile_Native",
		2: "k_EColorProfile_Standard",
		3: "k_EColorProfile_Vivid",
	}
	EColorProfile_value = map[string]int32{
		"k_EColorProfile_Invalid":  0,
		"k_EColorProfile_Native":   1,
		"k_EColorProfile_Standard": 2,
		"k_EColorProfile_Vivid":    3,
	}
)

func (x EColorProfile) Enum() *EColorProfile {
	p := new(EColorProfile)
	*p = x
	return p
}

func (x EColorProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EColorProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (EColorProfile) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x EColorProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EColorProfile) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EColorProfile(num)
	return nil
}

// Deprecated: Use EColorProfile.Descriptor instead.
func (EColorProfile) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type EBluetoothDeviceType int32

const (
	EBluetoothDeviceType_k_BluetoothDeviceType_Invalid    EBluetoothDeviceType = 0
	EBluetoothDeviceType_k_BluetoothDeviceType_Unknown    EBluetoothDeviceType = 1
	EBluetoothDeviceType_k_BluetoothDeviceType_Phone      EBluetoothDeviceType = 2
	EBluetoothDeviceType_k_BluetoothDeviceType_Computer   EBluetoothDeviceType = 3
	EBluetoothDeviceType_k_BluetoothDeviceType_Headset    EBluetoothDeviceType = 4
	EBluetoothDeviceType_k_BluetoothDeviceType_Headphones EBluetoothDeviceType = 5
	EBluetoothDeviceType_k_BluetoothDeviceType_Speakers   EBluetoothDeviceType = 6
	EBluetoothDeviceType_k_BluetoothDeviceType_OtherAudio EBluetoothDeviceType = 7
	EBluetoothDeviceType_k_BluetoothDeviceType_Mouse      EBluetoothDeviceType = 8
	EBluetoothDeviceType_k_BluetoothDeviceType_Joystick   EBluetoothDeviceType = 9
	EBluetoothDeviceType_k_BluetoothDeviceType_Gamepad    EBluetoothDeviceType = 10
	EBluetoothDeviceType_k_BluetoothDeviceType_Keyboard   EBluetoothDeviceType = 11
)

// Enum value maps for EBluetoothDeviceType.
var (
	EBluetoothDeviceType_name = map[int32]string{
		0:  "k_BluetoothDeviceType_Invalid",
		1:  "k_BluetoothDeviceType_Unknown",
		2:  "k_BluetoothDeviceType_Phone",
		3:  "k_BluetoothDeviceType_Computer",
		4:  "k_BluetoothDeviceType_Headset",
		5:  "k_BluetoothDeviceType_Headphones",
		6:  "k_BluetoothDeviceType_Speakers",
		7:  "k_BluetoothDeviceType_OtherAudio",
		8:  "k_BluetoothDeviceType_Mouse",
		9:  "k_BluetoothDeviceType_Joystick",
		10: "k_BluetoothDeviceType_Gamepad",
		11: "k_BluetoothDeviceType_Keyboard",
	}
	EBluetoothDeviceType_value = map[string]int32{
		"k_BluetoothDeviceType_Invalid":    0,
		"k_BluetoothDeviceType_Unknown":    1,
		"k_BluetoothDeviceType_Phone":      2,
		"k_BluetoothDeviceType_Computer":   3,
		"k_BluetoothDeviceType_Headset":    4,
		"k_BluetoothDeviceType_Headphones": 5,
		"k_BluetoothDeviceType_Speakers":   6,
		"k_BluetoothDeviceType_OtherAudio": 7,
		"k_BluetoothDeviceType_Mouse":      8,
		"k_BluetoothDeviceType_Joystick":   9,
		"k_BluetoothDeviceType_Gamepad":    10,
		"k_BluetoothDeviceType_Keyboard":   11,
	}
)

func (x EBluetoothDeviceType) Enum() *EBluetoothDeviceType {
	p := new(EBluetoothDeviceType)
	*p = x
	return p
}

func (x EBluetoothDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBluetoothDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (EBluetoothDeviceType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x EBluetoothDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBluetoothDeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBluetoothDeviceType(num)
	return nil
}

// Deprecated: Use EBluetoothDeviceType.Descriptor instead.
func (EBluetoothDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

type ESystemAudioDirection int32

const (
	ESystemAudioDirection_k_SystemAudioDirection_Invalid ESystemAudioDirection = 0
	ESystemAudioDirection_k_SystemAudioDirection_Input   ESystemAudioDirection = 1
	ESystemAudioDirection_k_SystemAudioDirection_Output  ESystemAudioDirection = 2
)

// Enum value maps for ESystemAudioDirection.
var (
	ESystemAudioDirection_name = map[int32]string{
		0: "k_SystemAudioDirection_Invalid",
		1: "k_SystemAudioDirection_Input",
		2: "k_SystemAudioDirection_Output",
	}
	ESystemAudioDirection_value = map[string]int32{
		"k_SystemAudioDirection_Invalid": 0,
		"k_SystemAudioDirection_Input":   1,
		"k_SystemAudioDirection_Output":  2,
	}
)

func (x ESystemAudioDirection) Enum() *ESystemAudioDirection {
	p := new(ESystemAudioDirection)
	*p = x
	return p
}

func (x ESystemAudioDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (ESystemAudioDirection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x ESystemAudioDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioDirection(num)
	return nil
}

// Deprecated: Use ESystemAudioDirection.Descriptor instead.
func (ESystemAudioDirection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

type ESystemAudioChannel int32

const (
	ESystemAudioChannel_k_SystemAudioChannel_Invalid     ESystemAudioChannel = 0
	ESystemAudioChannel_k_SystemAudioChannel_Aggregated  ESystemAudioChannel = 1
	ESystemAudioChannel_k_SystemAudioChannel_FrontLeft   ESystemAudioChannel = 2
	ESystemAudioChannel_k_SystemAudioChannel_FrontRight  ESystemAudioChannel = 3
	ESystemAudioChannel_k_SystemAudioChannel_LFE         ESystemAudioChannel = 4
	ESystemAudioChannel_k_SystemAudioChannel_BackLeft    ESystemAudioChannel = 5
	ESystemAudioChannel_k_SystemAudioChannel_BackRight   ESystemAudioChannel = 6
	ESystemAudioChannel_k_SystemAudioChannel_FrontCenter ESystemAudioChannel = 7
	ESystemAudioChannel_k_SystemAudioChannel_Unknown     ESystemAudioChannel = 8
	ESystemAudioChannel_k_SystemAudioChannel_Mono        ESystemAudioChannel = 9
)

// Enum value maps for ESystemAudioChannel.
var (
	ESystemAudioChannel_name = map[int32]string{
		0: "k_SystemAudioChannel_Invalid",
		1: "k_SystemAudioChannel_Aggregated",
		2: "k_SystemAudioChannel_FrontLeft",
		3: "k_SystemAudioChannel_FrontRight",
		4: "k_SystemAudioChannel_LFE",
		5: "k_SystemAudioChannel_BackLeft",
		6: "k_SystemAudioChannel_BackRight",
		7: "k_SystemAudioChannel_FrontCenter",
		8: "k_SystemAudioChannel_Unknown",
		9: "k_SystemAudioChannel_Mono",
	}
	ESystemAudioChannel_value = map[string]int32{
		"k_SystemAudioChannel_Invalid":     0,
		"k_SystemAudioChannel_Aggregated":  1,
		"k_SystemAudioChannel_FrontLeft":   2,
		"k_SystemAudioChannel_FrontRight":  3,
		"k_SystemAudioChannel_LFE":         4,
		"k_SystemAudioChannel_BackLeft":    5,
		"k_SystemAudioChannel_BackRight":   6,
		"k_SystemAudioChannel_FrontCenter": 7,
		"k_SystemAudioChannel_Unknown":     8,
		"k_SystemAudioChannel_Mono":        9,
	}
)

func (x ESystemAudioChannel) Enum() *ESystemAudioChannel {
	p := new(ESystemAudioChannel)
	*p = x
	return p
}

func (x ESystemAudioChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (ESystemAudioChannel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x ESystemAudioChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioChannel(num)
	return nil
}

// Deprecated: Use ESystemAudioChannel.Descriptor instead.
func (ESystemAudioChannel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

type ESystemAudioPortType int32

const (
	ESystemAudioPortType_k_SystemAudioPortType_Invalid     ESystemAudioPortType = 0
	ESystemAudioPortType_k_SystemAudioPortType_Unknown     ESystemAudioPortType = 1
	ESystemAudioPortType_k_SystemAudioPortType_Audio32f    ESystemAudioPortType = 2
	ESystemAudioPortType_k_SystemAudioPortType_Midi8b      ESystemAudioPortType = 3
	ESystemAudioPortType_k_SystemAudioPortType_Video32RGBA ESystemAudioPortType = 4
)

// Enum value maps for ESystemAudioPortType.
var (
	ESystemAudioPortType_name = map[int32]string{
		0: "k_SystemAudioPortType_Invalid",
		1: "k_SystemAudioPortType_Unknown",
		2: "k_SystemAudioPortType_Audio32f",
		3: "k_SystemAudioPortType_Midi8b",
		4: "k_SystemAudioPortType_Video32RGBA",
	}
	ESystemAudioPortType_value = map[string]int32{
		"k_SystemAudioPortType_Invalid":     0,
		"k_SystemAudioPortType_Unknown":     1,
		"k_SystemAudioPortType_Audio32f":    2,
		"k_SystemAudioPortType_Midi8b":      3,
		"k_SystemAudioPortType_Video32RGBA": 4,
	}
)

func (x ESystemAudioPortType) Enum() *ESystemAudioPortType {
	p := new(ESystemAudioPortType)
	*p = x
	return p
}

func (x ESystemAudioPortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioPortType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (ESystemAudioPortType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x ESystemAudioPortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioPortType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioPortType(num)
	return nil
}

// Deprecated: Use ESystemAudioPortType.Descriptor instead.
func (ESystemAudioPortType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

type ESystemAudioPortDirection int32

const (
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Invalid ESystemAudioPortDirection = 0
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Input   ESystemAudioPortDirection = 1
	ESystemAudioPortDirection_k_SystemAudioPortDirection_Output  ESystemAudioPortDirection = 2
)

// Enum value maps for ESystemAudioPortDirection.
var (
	ESystemAudioPortDirection_name = map[int32]string{
		0: "k_SystemAudioPortDirection_Invalid",
		1: "k_SystemAudioPortDirection_Input",
		2: "k_SystemAudioPortDirection_Output",
	}
	ESystemAudioPortDirection_value = map[string]int32{
		"k_SystemAudioPortDirection_Invalid": 0,
		"k_SystemAudioPortDirection_Input":   1,
		"k_SystemAudioPortDirection_Output":  2,
	}
)

func (x ESystemAudioPortDirection) Enum() *ESystemAudioPortDirection {
	p := new(ESystemAudioPortDirection)
	*p = x
	return p
}

func (x ESystemAudioPortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemAudioPortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (ESystemAudioPortDirection) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x ESystemAudioPortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemAudioPortDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemAudioPortDirection(num)
	return nil
}

// Deprecated: Use ESystemAudioPortDirection.Descriptor instead.
func (ESystemAudioPortDirection) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

type ESystemServiceState int32

const (
	ESystemServiceState_k_ESystemServiceState_Unavailable ESystemServiceState = 0
	ESystemServiceState_k_ESystemServiceState_Disabled    ESystemServiceState = 1
	ESystemServiceState_k_ESystemServiceState_Enabled     ESystemServiceState = 2
)

// Enum value maps for ESystemServiceState.
var (
	ESystemServiceState_name = map[int32]string{
		0: "k_ESystemServiceState_Unavailable",
		1: "k_ESystemServiceState_Disabled",
		2: "k_ESystemServiceState_Enabled",
	}
	ESystemServiceState_value = map[string]int32{
		"k_ESystemServiceState_Unavailable": 0,
		"k_ESystemServiceState_Disabled":    1,
		"k_ESystemServiceState_Enabled":     2,
	}
)

func (x ESystemServiceState) Enum() *ESystemServiceState {
	p := new(ESystemServiceState)
	*p = x
	return p
}

func (x ESystemServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (ESystemServiceState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x ESystemServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemServiceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemServiceState(num)
	return nil
}

// Deprecated: Use ESystemServiceState.Descriptor instead.
func (ESystemServiceState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

type EGraphicsPerfOverlayLevel int32

const (
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Hidden  EGraphicsPerfOverlayLevel = 0
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Basic   EGraphicsPerfOverlayLevel = 1
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Medium  EGraphicsPerfOverlayLevel = 2
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Full    EGraphicsPerfOverlayLevel = 3
	EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Minimal EGraphicsPerfOverlayLevel = 4
)

// Enum value maps for EGraphicsPerfOverlayLevel.
var (
	EGraphicsPerfOverlayLevel_name = map[int32]string{
		0: "k_EGraphicsPerfOverlayLevel_Hidden",
		1: "k_EGraphicsPerfOverlayLevel_Basic",
		2: "k_EGraphicsPerfOverlayLevel_Medium",
		3: "k_EGraphicsPerfOverlayLevel_Full",
		4: "k_EGraphicsPerfOverlayLevel_Minimal",
	}
	EGraphicsPerfOverlayLevel_value = map[string]int32{
		"k_EGraphicsPerfOverlayLevel_Hidden":  0,
		"k_EGraphicsPerfOverlayLevel_Basic":   1,
		"k_EGraphicsPerfOverlayLevel_Medium":  2,
		"k_EGraphicsPerfOverlayLevel_Full":    3,
		"k_EGraphicsPerfOverlayLevel_Minimal": 4,
	}
)

func (x EGraphicsPerfOverlayLevel) Enum() *EGraphicsPerfOverlayLevel {
	p := new(EGraphicsPerfOverlayLevel)
	*p = x
	return p
}

func (x EGraphicsPerfOverlayLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGraphicsPerfOverlayLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (EGraphicsPerfOverlayLevel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x EGraphicsPerfOverlayLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGraphicsPerfOverlayLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGraphicsPerfOverlayLevel(num)
	return nil
}

// Deprecated: Use EGraphicsPerfOverlayLevel.Descriptor instead.
func (EGraphicsPerfOverlayLevel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

type EGPUPerformanceLevel int32

const (
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Invalid   EGPUPerformanceLevel = 0
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Auto      EGPUPerformanceLevel = 1
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Manual    EGPUPerformanceLevel = 2
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Low       EGPUPerformanceLevel = 3
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_High      EGPUPerformanceLevel = 4
	EGPUPerformanceLevel_k_EGPUPerformanceLevel_Profiling EGPUPerformanceLevel = 5
)

// Enum value maps for EGPUPerformanceLevel.
var (
	EGPUPerformanceLevel_name = map[int32]string{
		0: "k_EGPUPerformanceLevel_Invalid",
		1: "k_EGPUPerformanceLevel_Auto",
		2: "k_EGPUPerformanceLevel_Manual",
		3: "k_EGPUPerformanceLevel_Low",
		4: "k_EGPUPerformanceLevel_High",
		5: "k_EGPUPerformanceLevel_Profiling",
	}
	EGPUPerformanceLevel_value = map[string]int32{
		"k_EGPUPerformanceLevel_Invalid":   0,
		"k_EGPUPerformanceLevel_Auto":      1,
		"k_EGPUPerformanceLevel_Manual":    2,
		"k_EGPUPerformanceLevel_Low":       3,
		"k_EGPUPerformanceLevel_High":      4,
		"k_EGPUPerformanceLevel_Profiling": 5,
	}
)

func (x EGPUPerformanceLevel) Enum() *EGPUPerformanceLevel {
	p := new(EGPUPerformanceLevel)
	*p = x
	return p
}

func (x EGPUPerformanceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGPUPerformanceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (EGPUPerformanceLevel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x EGPUPerformanceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGPUPerformanceLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGPUPerformanceLevel(num)
	return nil
}

// Deprecated: Use EGPUPerformanceLevel.Descriptor instead.
func (EGPUPerformanceLevel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

type EScalingFilter int32

const (
	EScalingFilter_k_EScalingFilter_Invalid EScalingFilter = 0
	EScalingFilter_k_EScalingFilter_FSR     EScalingFilter = 1
	EScalingFilter_k_EScalingFilter_Nearest EScalingFilter = 2
	EScalingFilter_k_EScalingFilter_Integer EScalingFilter = 3
	EScalingFilter_k_EScalingFilter_Linear  EScalingFilter = 4
	EScalingFilter_k_EScalingFilter_NIS     EScalingFilter = 5
)

// Enum value maps for EScalingFilter.
var (
	EScalingFilter_name = map[int32]string{
		0: "k_EScalingFilter_Invalid",
		1: "k_EScalingFilter_FSR",
		2: "k_EScalingFilter_Nearest",
		3: "k_EScalingFilter_Integer",
		4: "k_EScalingFilter_Linear",
		5: "k_EScalingFilter_NIS",
	}
	EScalingFilter_value = map[string]int32{
		"k_EScalingFilter_Invalid": 0,
		"k_EScalingFilter_FSR":     1,
		"k_EScalingFilter_Nearest": 2,
		"k_EScalingFilter_Integer": 3,
		"k_EScalingFilter_Linear":  4,
		"k_EScalingFilter_NIS":     5,
	}
)

func (x EScalingFilter) Enum() *EScalingFilter {
	p := new(EScalingFilter)
	*p = x
	return p
}

func (x EScalingFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EScalingFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (EScalingFilter) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x EScalingFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EScalingFilter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EScalingFilter(num)
	return nil
}

// Deprecated: Use EScalingFilter.Descriptor instead.
func (EScalingFilter) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

type ECPUGovernor int32

const (
	ECPUGovernor_k_ECPUGovernor_Invalid   ECPUGovernor = 0
	ECPUGovernor_k_ECPUGovernor_Perf      ECPUGovernor = 1
	ECPUGovernor_k_ECPUGovernor_Powersave ECPUGovernor = 2
	ECPUGovernor_k_ECPUGovernor_Manual    ECPUGovernor = 3
)

// Enum value maps for ECPUGovernor.
var (
	ECPUGovernor_name = map[int32]string{
		0: "k_ECPUGovernor_Invalid",
		1: "k_ECPUGovernor_Perf",
		2: "k_ECPUGovernor_Powersave",
		3: "k_ECPUGovernor_Manual",
	}
	ECPUGovernor_value = map[string]int32{
		"k_ECPUGovernor_Invalid":   0,
		"k_ECPUGovernor_Perf":      1,
		"k_ECPUGovernor_Powersave": 2,
		"k_ECPUGovernor_Manual":    3,
	}
)

func (x ECPUGovernor) Enum() *ECPUGovernor {
	p := new(ECPUGovernor)
	*p = x
	return p
}

func (x ECPUGovernor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECPUGovernor) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (ECPUGovernor) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x ECPUGovernor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECPUGovernor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECPUGovernor(num)
	return nil
}

// Deprecated: Use ECPUGovernor.Descriptor instead.
func (ECPUGovernor) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

type EUpdaterType int32

const (
	EUpdaterType_k_EUpdaterType_Invalid    EUpdaterType = 0
	EUpdaterType_k_EUpdaterType_Client     EUpdaterType = 1
	EUpdaterType_k_EUpdaterType_OS         EUpdaterType = 2
	EUpdaterType_k_EUpdaterType_BIOS       EUpdaterType = 3
	EUpdaterType_k_EUpdaterType_Aggregated EUpdaterType = 4
	EUpdaterType_k_EUpdaterType_Test1      EUpdaterType = 5
	EUpdaterType_k_EUpdaterType_Test2      EUpdaterType = 6
	EUpdaterType_k_EUpdaterType_Dummy      EUpdaterType = 7
)

// Enum value maps for EUpdaterType.
var (
	EUpdaterType_name = map[int32]string{
		0: "k_EUpdaterType_Invalid",
		1: "k_EUpdaterType_Client",
		2: "k_EUpdaterType_OS",
		3: "k_EUpdaterType_BIOS",
		4: "k_EUpdaterType_Aggregated",
		5: "k_EUpdaterType_Test1",
		6: "k_EUpdaterType_Test2",
		7: "k_EUpdaterType_Dummy",
	}
	EUpdaterType_value = map[string]int32{
		"k_EUpdaterType_Invalid":    0,
		"k_EUpdaterType_Client":     1,
		"k_EUpdaterType_OS":         2,
		"k_EUpdaterType_BIOS":       3,
		"k_EUpdaterType_Aggregated": 4,
		"k_EUpdaterType_Test1":      5,
		"k_EUpdaterType_Test2":      6,
		"k_EUpdaterType_Dummy":      7,
	}
)

func (x EUpdaterType) Enum() *EUpdaterType {
	p := new(EUpdaterType)
	*p = x
	return p
}

func (x EUpdaterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUpdaterType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[21].Descriptor()
}

func (EUpdaterType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[21]
}

func (x EUpdaterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUpdaterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUpdaterType(num)
	return nil
}

// Deprecated: Use EUpdaterType.Descriptor instead.
func (EUpdaterType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{21}
}

type EUpdaterState int32

const (
	EUpdaterState_k_EUpdaterState_Invalid              EUpdaterState = 0
	EUpdaterState_k_EUpdaterState_UpToDate             EUpdaterState = 2
	EUpdaterState_k_EUpdaterState_Checking             EUpdaterState = 3
	EUpdaterState_k_EUpdaterState_Available            EUpdaterState = 4
	EUpdaterState_k_EUpdaterState_Applying             EUpdaterState = 5
	EUpdaterState_k_EUpdaterState_ClientRestartPending EUpdaterState = 6
	EUpdaterState_k_EUpdaterState_SystemRestartPending EUpdaterState = 7
)

// Enum value maps for EUpdaterState.
var (
	EUpdaterState_name = map[int32]string{
		0: "k_EUpdaterState_Invalid",
		2: "k_EUpdaterState_UpToDate",
		3: "k_EUpdaterState_Checking",
		4: "k_EUpdaterState_Available",
		5: "k_EUpdaterState_Applying",
		6: "k_EUpdaterState_ClientRestartPending",
		7: "k_EUpdaterState_SystemRestartPending",
	}
	EUpdaterState_value = map[string]int32{
		"k_EUpdaterState_Invalid":              0,
		"k_EUpdaterState_UpToDate":             2,
		"k_EUpdaterState_Checking":             3,
		"k_EUpdaterState_Available":            4,
		"k_EUpdaterState_Applying":             5,
		"k_EUpdaterState_ClientRestartPending": 6,
		"k_EUpdaterState_SystemRestartPending": 7,
	}
)

func (x EUpdaterState) Enum() *EUpdaterState {
	p := new(EUpdaterState)
	*p = x
	return p
}

func (x EUpdaterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUpdaterState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[22].Descriptor()
}

func (EUpdaterState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[22]
}

func (x EUpdaterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUpdaterState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUpdaterState(num)
	return nil
}

// Deprecated: Use EUpdaterState.Descriptor instead.
func (EUpdaterState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{22}
}

type EStorageBlockContentType int32

const (
	EStorageBlockContentType_k_EStorageBlockContentType_Invalid    EStorageBlockContentType = 0
	EStorageBlockContentType_k_EStorageBlockContentType_Unknown    EStorageBlockContentType = 1
	EStorageBlockContentType_k_EStorageBlockContentType_FileSystem EStorageBlockContentType = 2
	EStorageBlockContentType_k_EStorageBlockContentType_Crypto     EStorageBlockContentType = 3
	EStorageBlockContentType_k_EStorageBlockContentType_Raid       EStorageBlockContentType = 4
)

// Enum value maps for EStorageBlockContentType.
var (
	EStorageBlockContentType_name = map[int32]string{
		0: "k_EStorageBlockContentType_Invalid",
		1: "k_EStorageBlockContentType_Unknown",
		2: "k_EStorageBlockContentType_FileSystem",
		3: "k_EStorageBlockContentType_Crypto",
		4: "k_EStorageBlockContentType_Raid",
	}
	EStorageBlockContentType_value = map[string]int32{
		"k_EStorageBlockContentType_Invalid":    0,
		"k_EStorageBlockContentType_Unknown":    1,
		"k_EStorageBlockContentType_FileSystem": 2,
		"k_EStorageBlockContentType_Crypto":     3,
		"k_EStorageBlockContentType_Raid":       4,
	}
)

func (x EStorageBlockContentType) Enum() *EStorageBlockContentType {
	p := new(EStorageBlockContentType)
	*p = x
	return p
}

func (x EStorageBlockContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[23].Descriptor()
}

func (EStorageBlockContentType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[23]
}

func (x EStorageBlockContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockContentType(num)
	return nil
}

// Deprecated: Use EStorageBlockContentType.Descriptor instead.
func (EStorageBlockContentType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{23}
}

type EStorageBlockFileSystemType int32

const (
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid EStorageBlockFileSystemType = 0
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Unknown EStorageBlockFileSystemType = 1
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_VFat    EStorageBlockFileSystemType = 2
	EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Ext4    EStorageBlockFileSystemType = 3
)

// Enum value maps for EStorageBlockFileSystemType.
var (
	EStorageBlockFileSystemType_name = map[int32]string{
		0: "k_EStorageBlockFileSystemType_Invalid",
		1: "k_EStorageBlockFileSystemType_Unknown",
		2: "k_EStorageBlockFileSystemType_VFat",
		3: "k_EStorageBlockFileSystemType_Ext4",
	}
	EStorageBlockFileSystemType_value = map[string]int32{
		"k_EStorageBlockFileSystemType_Invalid": 0,
		"k_EStorageBlockFileSystemType_Unknown": 1,
		"k_EStorageBlockFileSystemType_VFat":    2,
		"k_EStorageBlockFileSystemType_Ext4":    3,
	}
)

func (x EStorageBlockFileSystemType) Enum() *EStorageBlockFileSystemType {
	p := new(EStorageBlockFileSystemType)
	*p = x
	return p
}

func (x EStorageBlockFileSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStorageBlockFileSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[24].Descriptor()
}

func (EStorageBlockFileSystemType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[24]
}

func (x EStorageBlockFileSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStorageBlockFileSystemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStorageBlockFileSystemType(num)
	return nil
}

// Deprecated: Use EStorageBlockFileSystemType.Descriptor instead.
func (EStorageBlockFileSystemType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{24}
}

type ESteamDeckCompatibilityCategory int32

const (
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Unknown     ESteamDeckCompatibilityCategory = 0
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Unsupported ESteamDeckCompatibilityCategory = 1
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Playable    ESteamDeckCompatibilityCategory = 2
	ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Verified    ESteamDeckCompatibilityCategory = 3
)

// Enum value maps for ESteamDeckCompatibilityCategory.
var (
	ESteamDeckCompatibilityCategory_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityCategory_Unknown",
		1: "k_ESteamDeckCompatibilityCategory_Unsupported",
		2: "k_ESteamDeckCompatibilityCategory_Playable",
		3: "k_ESteamDeckCompatibilityCategory_Verified",
	}
	ESteamDeckCompatibilityCategory_value = map[string]int32{
		"k_ESteamDeckCompatibilityCategory_Unknown":     0,
		"k_ESteamDeckCompatibilityCategory_Unsupported": 1,
		"k_ESteamDeckCompatibilityCategory_Playable":    2,
		"k_ESteamDeckCompatibilityCategory_Verified":    3,
	}
)

func (x ESteamDeckCompatibilityCategory) Enum() *ESteamDeckCompatibilityCategory {
	p := new(ESteamDeckCompatibilityCategory)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[25].Descriptor()
}

func (ESteamDeckCompatibilityCategory) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[25]
}

func (x ESteamDeckCompatibilityCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityCategory(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityCategory.Descriptor instead.
func (ESteamDeckCompatibilityCategory) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{25}
}

type ESteamDeckCompatibilityResultDisplayType int32

const (
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Invisible     ESteamDeckCompatibilityResultDisplayType = 0
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Informational ESteamDeckCompatibilityResultDisplayType = 1
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Unsupported   ESteamDeckCompatibilityResultDisplayType = 2
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Playable      ESteamDeckCompatibilityResultDisplayType = 3
	ESteamDeckCompatibilityResultDisplayType_k_ESteamDeckCompatibilityResultDisplayType_Verified      ESteamDeckCompatibilityResultDisplayType = 4
)

// Enum value maps for ESteamDeckCompatibilityResultDisplayType.
var (
	ESteamDeckCompatibilityResultDisplayType_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityResultDisplayType_Invisible",
		1: "k_ESteamDeckCompatibilityResultDisplayType_Informational",
		2: "k_ESteamDeckCompatibilityResultDisplayType_Unsupported",
		3: "k_ESteamDeckCompatibilityResultDisplayType_Playable",
		4: "k_ESteamDeckCompatibilityResultDisplayType_Verified",
	}
	ESteamDeckCompatibilityResultDisplayType_value = map[string]int32{
		"k_ESteamDeckCompatibilityResultDisplayType_Invisible":     0,
		"k_ESteamDeckCompatibilityResultDisplayType_Informational": 1,
		"k_ESteamDeckCompatibilityResultDisplayType_Unsupported":   2,
		"k_ESteamDeckCompatibilityResultDisplayType_Playable":      3,
		"k_ESteamDeckCompatibilityResultDisplayType_Verified":      4,
	}
)

func (x ESteamDeckCompatibilityResultDisplayType) Enum() *ESteamDeckCompatibilityResultDisplayType {
	p := new(ESteamDeckCompatibilityResultDisplayType)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityResultDisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityResultDisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[26].Descriptor()
}

func (ESteamDeckCompatibilityResultDisplayType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[26]
}

func (x ESteamDeckCompatibilityResultDisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityResultDisplayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityResultDisplayType(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityResultDisplayType.Descriptor instead.
func (ESteamDeckCompatibilityResultDisplayType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{26}
}

type EACState int32

const (
	EACState_k_EACState_Unknown       EACState = 0
	EACState_k_EACState_Disconnected  EACState = 1
	EACState_k_EACState_Connected     EACState = 2
	EACState_k_EACState_ConnectedSlow EACState = 3
)

// Enum value maps for EACState.
var (
	EACState_name = map[int32]string{
		0: "k_EACState_Unknown",
		1: "k_EACState_Disconnected",
		2: "k_EACState_Connected",
		3: "k_EACState_ConnectedSlow",
	}
	EACState_value = map[string]int32{
		"k_EACState_Unknown":       0,
		"k_EACState_Disconnected":  1,
		"k_EACState_Connected":     2,
		"k_EACState_ConnectedSlow": 3,
	}
)

func (x EACState) Enum() *EACState {
	p := new(EACState)
	*p = x
	return p
}

func (x EACState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EACState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[27].Descriptor()
}

func (EACState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[27]
}

func (x EACState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EACState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EACState(num)
	return nil
}

// Deprecated: Use EACState.Descriptor instead.
func (EACState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{27}
}

type EBatteryState int32

const (
	EBatteryState_k_EBatteryState_Unknown     EBatteryState = 0
	EBatteryState_k_EBatteryState_Discharging EBatteryState = 1
	EBatteryState_k_EBatteryState_Charging    EBatteryState = 2
	EBatteryState_k_EBatteryState_Full        EBatteryState = 3
)

// Enum value maps for EBatteryState.
var (
	EBatteryState_name = map[int32]string{
		0: "k_EBatteryState_Unknown",
		1: "k_EBatteryState_Discharging",
		2: "k_EBatteryState_Charging",
		3: "k_EBatteryState_Full",
	}
	EBatteryState_value = map[string]int32{
		"k_EBatteryState_Unknown":     0,
		"k_EBatteryState_Discharging": 1,
		"k_EBatteryState_Charging":    2,
		"k_EBatteryState_Full":        3,
	}
)

func (x EBatteryState) Enum() *EBatteryState {
	p := new(EBatteryState)
	*p = x
	return p
}

func (x EBatteryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBatteryState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[28].Descriptor()
}

func (EBatteryState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[28]
}

func (x EBatteryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBatteryState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBatteryState(num)
	return nil
}

// Deprecated: Use EBatteryState.Descriptor instead.
func (EBatteryState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{28}
}

type EOSBranch int32

const (
	EOSBranch_k_EOSBranch_Unknown          EOSBranch = 0
	EOSBranch_k_EOSBranch_Release          EOSBranch = 1
	EOSBranch_k_EOSBranch_ReleaseCandidate EOSBranch = 2
	EOSBranch_k_EOSBranch_Beta             EOSBranch = 3
	EOSBranch_k_EOSBranch_BetaCandidate    EOSBranch = 4
	EOSBranch_k_EOSBranch_Main             EOSBranch = 5
)

// Enum value maps for EOSBranch.
var (
	EOSBranch_name = map[int32]string{
		0: "k_EOSBranch_Unknown",
		1: "k_EOSBranch_Release",
		2: "k_EOSBranch_ReleaseCandidate",
		3: "k_EOSBranch_Beta",
		4: "k_EOSBranch_BetaCandidate",
		5: "k_EOSBranch_Main",
	}
	EOSBranch_value = map[string]int32{
		"k_EOSBranch_Unknown":          0,
		"k_EOSBranch_Release":          1,
		"k_EOSBranch_ReleaseCandidate": 2,
		"k_EOSBranch_Beta":             3,
		"k_EOSBranch_BetaCandidate":    4,
		"k_EOSBranch_Main":             5,
	}
)

func (x EOSBranch) Enum() *EOSBranch {
	p := new(EOSBranch)
	*p = x
	return p
}

func (x EOSBranch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOSBranch) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[29].Descriptor()
}

func (EOSBranch) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[29]
}

func (x EOSBranch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOSBranch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOSBranch(num)
	return nil
}

// Deprecated: Use EOSBranch.Descriptor instead.
func (EOSBranch) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{29}
}

type ECommunityItemClass int32

const (
	ECommunityItemClass_k_ECommunityItemClass_Invalid               ECommunityItemClass = 0
	ECommunityItemClass_k_ECommunityItemClass_Badge                 ECommunityItemClass = 1
	ECommunityItemClass_k_ECommunityItemClass_GameCard              ECommunityItemClass = 2
	ECommunityItemClass_k_ECommunityItemClass_ProfileBackground     ECommunityItemClass = 3
	ECommunityItemClass_k_ECommunityItemClass_Emoticon              ECommunityItemClass = 4
	ECommunityItemClass_k_ECommunityItemClass_BoosterPack           ECommunityItemClass = 5
	ECommunityItemClass_k_ECommunityItemClass_Consumable            ECommunityItemClass = 6
	ECommunityItemClass_k_ECommunityItemClass_GameGoo               ECommunityItemClass = 7
	ECommunityItemClass_k_ECommunityItemClass_ProfileModifier       ECommunityItemClass = 8
	ECommunityItemClass_k_ECommunityItemClass_Scene                 ECommunityItemClass = 9
	ECommunityItemClass_k_ECommunityItemClass_SalienItem            ECommunityItemClass = 10
	ECommunityItemClass_k_ECommunityItemClass_Sticker               ECommunityItemClass = 11
	ECommunityItemClass_k_ECommunityItemClass_ChatEffect            ECommunityItemClass = 12
	ECommunityItemClass_k_ECommunityItemClass_MiniProfileBackground ECommunityItemClass = 13
	ECommunityItemClass_k_ECommunityItemClass_AvatarFrame           ECommunityItemClass = 14
	ECommunityItemClass_k_ECommunityItemClass_AnimatedAvatar        ECommunityItemClass = 15
	ECommunityItemClass_k_ECommunityItemClass_SteamDeckKeyboardSkin ECommunityItemClass = 16
)

// Enum value maps for ECommunityItemClass.
var (
	ECommunityItemClass_name = map[int32]string{
		0:  "k_ECommunityItemClass_Invalid",
		1:  "k_ECommunityItemClass_Badge",
		2:  "k_ECommunityItemClass_GameCard",
		3:  "k_ECommunityItemClass_ProfileBackground",
		4:  "k_ECommunityItemClass_Emoticon",
		5:  "k_ECommunityItemClass_BoosterPack",
		6:  "k_ECommunityItemClass_Consumable",
		7:  "k_ECommunityItemClass_GameGoo",
		8:  "k_ECommunityItemClass_ProfileModifier",
		9:  "k_ECommunityItemClass_Scene",
		10: "k_ECommunityItemClass_SalienItem",
		11: "k_ECommunityItemClass_Sticker",
		12: "k_ECommunityItemClass_ChatEffect",
		13: "k_ECommunityItemClass_MiniProfileBackground",
		14: "k_ECommunityItemClass_AvatarFrame",
		15: "k_ECommunityItemClass_AnimatedAvatar",
		16: "k_ECommunityItemClass_SteamDeckKeyboardSkin",
	}
	ECommunityItemClass_value = map[string]int32{
		"k_ECommunityItemClass_Invalid":               0,
		"k_ECommunityItemClass_Badge":                 1,
		"k_ECommunityItemClass_GameCard":              2,
		"k_ECommunityItemClass_ProfileBackground":     3,
		"k_ECommunityItemClass_Emoticon":              4,
		"k_ECommunityItemClass_BoosterPack":           5,
		"k_ECommunityItemClass_Consumable":            6,
		"k_ECommunityItemClass_GameGoo":               7,
		"k_ECommunityItemClass_ProfileModifier":       8,
		"k_ECommunityItemClass_Scene":                 9,
		"k_ECommunityItemClass_SalienItem":            10,
		"k_ECommunityItemClass_Sticker":               11,
		"k_ECommunityItemClass_ChatEffect":            12,
		"k_ECommunityItemClass_MiniProfileBackground": 13,
		"k_ECommunityItemClass_AvatarFrame":           14,
		"k_ECommunityItemClass_AnimatedAvatar":        15,
		"k_ECommunityItemClass_SteamDeckKeyboardSkin": 16,
	}
)

func (x ECommunityItemClass) Enum() *ECommunityItemClass {
	p := new(ECommunityItemClass)
	*p = x
	return p
}

func (x ECommunityItemClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommunityItemClass) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[30].Descriptor()
}

func (ECommunityItemClass) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[30]
}

func (x ECommunityItemClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECommunityItemClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECommunityItemClass(num)
	return nil
}

// Deprecated: Use ECommunityItemClass.Descriptor instead.
func (ECommunityItemClass) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{30}
}

type ESteamDeckCompatibilityFeedback int32

const (
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Unset    ESteamDeckCompatibilityFeedback = 0
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Agree    ESteamDeckCompatibilityFeedback = 1
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Disagree ESteamDeckCompatibilityFeedback = 2
	ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Ignore   ESteamDeckCompatibilityFeedback = 3
)

// Enum value maps for ESteamDeckCompatibilityFeedback.
var (
	ESteamDeckCompatibilityFeedback_name = map[int32]string{
		0: "k_ESteamDeckCompatibilityFeedback_Unset",
		1: "k_ESteamDeckCompatibilityFeedback_Agree",
		2: "k_ESteamDeckCompatibilityFeedback_Disagree",
		3: "k_ESteamDeckCompatibilityFeedback_Ignore",
	}
	ESteamDeckCompatibilityFeedback_value = map[string]int32{
		"k_ESteamDeckCompatibilityFeedback_Unset":    0,
		"k_ESteamDeckCompatibilityFeedback_Agree":    1,
		"k_ESteamDeckCompatibilityFeedback_Disagree": 2,
		"k_ESteamDeckCompatibilityFeedback_Ignore":   3,
	}
)

func (x ESteamDeckCompatibilityFeedback) Enum() *ESteamDeckCompatibilityFeedback {
	p := new(ESteamDeckCompatibilityFeedback)
	*p = x
	return p
}

func (x ESteamDeckCompatibilityFeedback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckCompatibilityFeedback) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[31].Descriptor()
}

func (ESteamDeckCompatibilityFeedback) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[31]
}

func (x ESteamDeckCompatibilityFeedback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckCompatibilityFeedback) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckCompatibilityFeedback(num)
	return nil
}

// Deprecated: Use ESteamDeckCompatibilityFeedback.Descriptor instead.
func (ESteamDeckCompatibilityFeedback) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{31}
}

type EProvideDeckFeedbackPreference int32

const (
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_Unset EProvideDeckFeedbackPreference = 0
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_Yes   EProvideDeckFeedbackPreference = 1
	EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_No    EProvideDeckFeedbackPreference = 2
)

// Enum value maps for EProvideDeckFeedbackPreference.
var (
	EProvideDeckFeedbackPreference_name = map[int32]string{
		0: "k_EProvideDeckFeedbackPreference_Unset",
		1: "k_EProvideDeckFeedbackPreference_Yes",
		2: "k_EProvideDeckFeedbackPreference_No",
	}
	EProvideDeckFeedbackPreference_value = map[string]int32{
		"k_EProvideDeckFeedbackPreference_Unset": 0,
		"k_EProvideDeckFeedbackPreference_Yes":   1,
		"k_EProvideDeckFeedbackPreference_No":    2,
	}
)

func (x EProvideDeckFeedbackPreference) Enum() *EProvideDeckFeedbackPreference {
	p := new(EProvideDeckFeedbackPreference)
	*p = x
	return p
}

func (x EProvideDeckFeedbackPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProvideDeckFeedbackPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[32].Descriptor()
}

func (EProvideDeckFeedbackPreference) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[32]
}

func (x EProvideDeckFeedbackPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProvideDeckFeedbackPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProvideDeckFeedbackPreference(num)
	return nil
}

// Deprecated: Use EProvideDeckFeedbackPreference.Descriptor instead.
func (EProvideDeckFeedbackPreference) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{32}
}

type ETouchGesture int32

const (
	ETouchGesture_k_ETouchGestureNone           ETouchGesture = 0
	ETouchGesture_k_ETouchGestureTouch          ETouchGesture = 1
	ETouchGesture_k_ETouchGestureTap            ETouchGesture = 2
	ETouchGesture_k_ETouchGestureDoubleTap      ETouchGesture = 3
	ETouchGesture_k_ETouchGestureShortPress     ETouchGesture = 4
	ETouchGesture_k_ETouchGestureLongPress      ETouchGesture = 5
	ETouchGesture_k_ETouchGestureLongTap        ETouchGesture = 6
	ETouchGesture_k_ETouchGestureTwoFingerTap   ETouchGesture = 7
	ETouchGesture_k_ETouchGestureTapCancelled   ETouchGesture = 8
	ETouchGesture_k_ETouchGesturePinchBegin     ETouchGesture = 9
	ETouchGesture_k_ETouchGesturePinchUpdate    ETouchGesture = 10
	ETouchGesture_k_ETouchGesturePinchEnd       ETouchGesture = 11
	ETouchGesture_k_ETouchGestureFlingStart     ETouchGesture = 12
	ETouchGesture_k_ETouchGestureFlingCancelled ETouchGesture = 13
)

// Enum value maps for ETouchGesture.
var (
	ETouchGesture_name = map[int32]string{
		0:  "k_ETouchGestureNone",
		1:  "k_ETouchGestureTouch",
		2:  "k_ETouchGestureTap",
		3:  "k_ETouchGestureDoubleTap",
		4:  "k_ETouchGestureShortPress",
		5:  "k_ETouchGestureLongPress",
		6:  "k_ETouchGestureLongTap",
		7:  "k_ETouchGestureTwoFingerTap",
		8:  "k_ETouchGestureTapCancelled",
		9:  "k_ETouchGesturePinchBegin",
		10: "k_ETouchGesturePinchUpdate",
		11: "k_ETouchGesturePinchEnd",
		12: "k_ETouchGestureFlingStart",
		13: "k_ETouchGestureFlingCancelled",
	}
	ETouchGesture_value = map[string]int32{
		"k_ETouchGestureNone":           0,
		"k_ETouchGestureTouch":          1,
		"k_ETouchGestureTap":            2,
		"k_ETouchGestureDoubleTap":      3,
		"k_ETouchGestureShortPress":     4,
		"k_ETouchGestureLongPress":      5,
		"k_ETouchGestureLongTap":        6,
		"k_ETouchGestureTwoFingerTap":   7,
		"k_ETouchGestureTapCancelled":   8,
		"k_ETouchGesturePinchBegin":     9,
		"k_ETouchGesturePinchUpdate":    10,
		"k_ETouchGesturePinchEnd":       11,
		"k_ETouchGestureFlingStart":     12,
		"k_ETouchGestureFlingCancelled": 13,
	}
)

func (x ETouchGesture) Enum() *ETouchGesture {
	p := new(ETouchGesture)
	*p = x
	return p
}

func (x ETouchGesture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETouchGesture) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[33].Descriptor()
}

func (ETouchGesture) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[33]
}

func (x ETouchGesture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETouchGesture) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETouchGesture(num)
	return nil
}

// Deprecated: Use ETouchGesture.Descriptor instead.
func (ETouchGesture) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{33}
}

type ESessionPersistence int32

const (
	ESessionPersistence_k_ESessionPersistence_Invalid    ESessionPersistence = -1
	ESessionPersistence_k_ESessionPersistence_Ephemeral  ESessionPersistence = 0
	ESessionPersistence_k_ESessionPersistence_Persistent ESessionPersistence = 1
)

// Enum value maps for ESessionPersistence.
var (
	ESessionPersistence_name = map[int32]string{
		-1: "k_ESessionPersistence_Invalid",
		0:  "k_ESessionPersistence_Ephemeral",
		1:  "k_ESessionPersistence_Persistent",
	}
	ESessionPersistence_value = map[string]int32{
		"k_ESessionPersistence_Invalid":    -1,
		"k_ESessionPersistence_Ephemeral":  0,
		"k_ESessionPersistence_Persistent": 1,
	}
)

func (x ESessionPersistence) Enum() *ESessionPersistence {
	p := new(ESessionPersistence)
	*p = x
	return p
}

func (x ESessionPersistence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESessionPersistence) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[34].Descriptor()
}

func (ESessionPersistence) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[34]
}

func (x ESessionPersistence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESessionPersistence) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESessionPersistence(num)
	return nil
}

// Deprecated: Use ESessionPersistence.Descriptor instead.
func (ESessionPersistence) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{34}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x80, 0x0a, 0x0a, 0x17, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x03, 0x12, 0x46, 0x0a, 0x42, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40,
	0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x4a, 0x0a, 0x46, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x3d, 0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x32,
	0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x73, 0x63,
	0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x70, 0x10, 0x0b,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10,
	0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x39, 0x0a, 0x35, 0x6b, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x10, 0x0f, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x10, 0x10, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x3d,
	0x0a, 0x39, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x12, 0x12, 0x3f, 0x0a,
	0x3b, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x13, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x10, 0x14, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x10, 0x15, 0x2a, 0xbc, 0x01, 0x0a, 0x23, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0xd5, 0x02, 0x0a, 0x21, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x55,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x32, 0x12, 0x2e, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10, 0x4b, 0x12, 0x32, 0x0a,
	0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x10,
	0x64, 0x2a, 0xb1, 0x03, 0x0a, 0x11, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x48,
	0x61, 0x73, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x49, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x62, 0x10, 0x80, 0x02, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x10, 0x80, 0x04, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6e, 0x66, 0x6f, 0x6f, 0x74,
	0x10, 0x80, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x52, 0x10, 0x80, 0x10, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x10, 0x80, 0x20, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x10, 0x80, 0x40, 0x2a, 0xa7, 0x01, 0x0a, 0x15, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x2a,
	0xec, 0x08, 0x0a, 0x19, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x72, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f,
	0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x07, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x10, 0x0c, 0x12, 0x2e, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x0d, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x79, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x13,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x61, 0x6c, 0x69, 0x65, 0x6e, 0x10, 0x14, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x15, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x10, 0x16, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x10, 0x17, 0x2a, 0xc8,
	0x01, 0x0a, 0x1b, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x47, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x19, 0x45, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0xe8, 0x01, 0x0a, 0x12, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x63, 0x75, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x2a, 0x84,
	0x01, 0x0a, 0x15, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x0d, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x56, 0x69, 0x76, 0x69, 0x64, 0x10, 0x03, 0x2a, 0xc0, 0x03, 0x0a, 0x14, 0x45, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x10, 0x04,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x73, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x07,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x10,
	0x08, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x6f, 0x79, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x0b, 0x2a, 0x80, 0x01, 0x0a,
	0x15, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x02, 0x2a,
	0xf1, 0x02, 0x0a, 0x13, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x4c, 0x46, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x42, 0x61,
	0x63, 0x6b, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x4d, 0x6f, 0x6e,
	0x6f, 0x10, 0x09, 0x2a, 0xc9, 0x01, 0x0a, 0x14, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x33, 0x32, 0x66, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x69, 0x64, 0x69, 0x38, 0x62, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x33, 0x32, 0x52, 0x47, 0x42, 0x41, 0x10, 0x04, 0x2a,
	0x90, 0x01, 0x0a, 0x19, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xe1, 0x01, 0x0a, 0x19, 0x45, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72,
	0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x46, 0x75, 0x6c,
	0x6c, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0xe5, 0x01, 0x0a,
	0x14, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45,
	0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x10, 0x05, 0x2a, 0xbb, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x46, 0x53, 0x52, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b,
	0x5f, 0x45, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x4e, 0x49, 0x53,
	0x10, 0x05, 0x2a, 0x7c, 0x0a, 0x0c, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x5f, 0x50, 0x65, 0x72, 0x66, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x43, 0x50,
	0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x61, 0x76, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x03,
	0x2a, 0xe2, 0x01, 0x0a, 0x0c, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x53, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x49, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x31, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x32, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x75,
	0x6d, 0x6d, 0x79, 0x10, 0x07, 0x2a, 0xf9, 0x01, 0x0a, 0x0d, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x07, 0x2a, 0xe1, 0x01, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x61, 0x69, 0x64, 0x10, 0x04, 0x2a, 0xc3, 0x01, 0x0a, 0x1b, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x46, 0x61,
	0x74, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x78, 0x74, 0x34, 0x10, 0x03, 0x2a, 0xe3, 0x01, 0x0a, 0x1f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x31,
	0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x03, 0x2a, 0xd0, 0x02, 0x0a, 0x28, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x08, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x41,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x41, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x77, 0x10, 0x03, 0x2a, 0x85, 0x01,
	0x0a, 0x0d, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46,
	0x75, 0x6c, 0x6c, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a, 0x09, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x4f, 0x53,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x42, 0x65, 0x74, 0x61, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x42, 0x65, 0x74,
	0x61, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x4d, 0x61, 0x69, 0x6e,
	0x10, 0x05, 0x2a, 0xac, 0x05, 0x0a, 0x13, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x6f,
	0x6f, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x08, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x10, 0x09, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x61, 0x6c, 0x69, 0x65, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x2f,
	0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0d, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x10, 0x0f,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6b, 0x69, 0x6e, 0x10,
	0x10, 0x2a, 0xd9, 0x01, 0x0a, 0x1f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12,
	0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x10, 0x03, 0x2a, 0x9f, 0x01,
	0x0a, 0x1e, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x59, 0x65, 0x73, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x10, 0x02, 0x2a,
	0xb1, 0x03, 0x0a, 0x0d, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x70, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x70, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x61,
	0x70, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x54,
	0x61, 0x70, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x10,
	0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0c,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x10, 0x0d, 0x2a, 0x8c, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x42, 0x09, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x01, 0x80, 0x01, 0x01,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 35)
var file_enums_proto_goTypes = []interface{}{
	(EPublishedFileQueryType)(0),                  // 0: EPublishedFileQueryType
	(EPublishedFileInappropriateProvider)(0),      // 1: EPublishedFileInappropriateProvider
	(EPublishedFileInappropriateResult)(0),        // 2: EPublishedFileInappropriateResult
	(EPersonaStateFlag)(0),                        // 3: EPersonaStateFlag
	(EContentCheckProvider)(0),                    // 4: EContentCheckProvider
	(EProfileCustomizationType)(0),                // 5: EProfileCustomizationType
	(EPublishedFileStorageSystem)(0),              // 6: EPublishedFileStorageSystem
	(ECloudStoragePersistState)(0),                // 7: ECloudStoragePersistState
	(ESDCardFormatStage)(0),                       // 8: ESDCardFormatStage
	(ESystemFanControlMode)(0),                    // 9: ESystemFanControlMode
	(EColorProfile)(0),                            // 10: EColorProfile
	(EBluetoothDeviceType)(0),                     // 11: EBluetoothDeviceType
	(ESystemAudioDirection)(0),                    // 12: ESystemAudioDirection
	(ESystemAudioChannel)(0),                      // 13: ESystemAudioChannel
	(ESystemAudioPortType)(0),                     // 14: ESystemAudioPortType
	(ESystemAudioPortDirection)(0),                // 15: ESystemAudioPortDirection
	(ESystemServiceState)(0),                      // 16: ESystemServiceState
	(EGraphicsPerfOverlayLevel)(0),                // 17: EGraphicsPerfOverlayLevel
	(EGPUPerformanceLevel)(0),                     // 18: EGPUPerformanceLevel
	(EScalingFilter)(0),                           // 19: EScalingFilter
	(ECPUGovernor)(0),                             // 20: ECPUGovernor
	(EUpdaterType)(0),                             // 21: EUpdaterType
	(EUpdaterState)(0),                            // 22: EUpdaterState
	(EStorageBlockContentType)(0),                 // 23: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),              // 24: EStorageBlockFileSystemType
	(ESteamDeckCompatibilityCategory)(0),          // 25: ESteamDeckCompatibilityCategory
	(ESteamDeckCompatibilityResultDisplayType)(0), // 26: ESteamDeckCompatibilityResultDisplayType
	(EACState)(0),                                 // 27: EACState
	(EBatteryState)(0),                            // 28: EBatteryState
	(EOSBranch)(0),                                // 29: EOSBranch
	(ECommunityItemClass)(0),                      // 30: ECommunityItemClass
	(ESteamDeckCompatibilityFeedback)(0),          // 31: ESteamDeckCompatibilityFeedback
	(EProvideDeckFeedbackPreference)(0),           // 32: EProvideDeckFeedbackPreference
	(ETouchGesture)(0),                            // 33: ETouchGesture
	(ESessionPersistence)(0),                      // 34: ESessionPersistence
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      35,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
